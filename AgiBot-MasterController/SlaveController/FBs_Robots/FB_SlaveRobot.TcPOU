<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_SlaveRobot" Id="{8cbdb2ba-9735-46e3-8cbc-296330acc8cc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SlaveRobot
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// master-slave motion scale
	m_motionScale :LREAL;
	
	// slave arms, responsible for arm kinematic and control
	m_slaveArms :ARRAY[1..g_sArmNum] OF FB_SlaveArm;
	
	// arm state
	m_slaveArmState:ARRAY[1..g_sArmNum] OF E_slaveArmState:=[4(E_SlaveArmState.SlaveArmState_Init)];
	m_lastSlaveArmState:ARRAY[1..g_sArmNum] OF E_slaveArmState:=[4(E_SlaveArmState.SlaveArmState_Init)];
	m_nextSlaveArmState:ARRAY[1..g_sArmNum] OF E_masterArmState:=[4(E_SlaveArmState.SlaveArmState_Init)];
	
	// index(1 to 4) of slave arm which is tele-linked to master arm
	m_teleMasterArmIdx:ARRAY[1..g_sArmNum] OF E_MatchedMasterArmIdx:=[4(MatchedMasterArmIdx_NULL)];
	
	// all arm controller instance 
	m_armCtrlFactory :ARRAY[1..g_sArmNum,1..SlaveArmState_totalNum] OF I_SlaveArmCtrl;
	m_armError :ARRAY[1..g_sArmNum] OF FB_StateCtrlError;
	m_armInit :ARRAY[1..g_sArmNum] OF FB_StateCtrlInit;
	m_armSelfCheck :ARRAY[1..g_sArmNum] OF FB_StateCtrlSelfCheck;
	m_armStandBy :ARRAY[1..g_sArmNum] OF FB_StateCtrlStandBy;
	m_mountPanel :ARRAY[1..g_sArmNum] OF FB_StateCtrlMountPanel;
	m_panelReady :ARRAY[1..g_sArmNum] OF FB_StateCtrlPanelReady;
	m_mountInstru :ARRAY[1..g_sArmNum] OF FB_StateCtrlMountInstru;
	m_instruReady :ARRAY[1..g_sArmNum] OF FB_StateCtrlInstruReady;
	m_armMasterSlave :ARRAY[1..g_sArmNum] OF FB_StateCtrlMasterSlave;
	m_mountScope :ARRAY[1..g_sArmNum] OF FB_StateCtrlMountScope;
	m_scopeReady :ARRAY[1..g_sArmNum] OF FB_StateCtrlScopeReady;
	m_armEndoscope :ARRAY[1..g_sArmNum] OF FB_StateCtrlEndoscope;
	m_armCart :ARRAY[1..g_sArmNum] OF FB_StateCtrlCart;
	m_armGraCali :ARRAY[1..g_sArmNum] OF FB_StateCtrlGraCali;
	
	// arm controller interface
	m_armCtrl :ARRAY[1..g_sArmNum] OF I_SlaveArmCtrl;
	m_armCtrlCmds :ARRAY[1..g_sArmNum] OF ST_SlaveArmCtrlCmds;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

]]></ST>
    </Implementation>
    <Method Name="checkTeleMasterArmIdx" Id="{09218ffd-5fe3-49d7-900b-14b283e8d9f2}">
      <Declaration><![CDATA[METHOD checkTeleMasterArmIdx : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// TODO: decide the matched master arm index for each slave arm]]></ST>
      </Implementation>
    </Method>
    <Method Name="getStatus" Id="{b6139e8c-2703-424c-9761-ad1add6b1ff1}">
      <Declaration><![CDATA[METHOD PUBLIC getStatus : BOOL
VAR_IN_OUT
	// slave robot information, including arm status and cartesian data
	r_slaveStatus :ST_SlaveStatus;
	
	// slave robot joint data
	r_slaveJointsData :ST_SlaveJointData;
	
END_VAR

VAR
	i:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[r_slaveStatus.m_armState:=m_slaveArmState;
r_slaveStatus.m_teleMasterArmIdx := m_teleMasterArmIdx;

// TODO: project cartesion data to monitor coordinate
FOR i:=1 TO g_sArmNum DO
	
	// instrument data
	r_slaveStatus.m_instruStauts[i]:=m_slaveArms[i].instruStatus;
	
	// cartesion
	r_slaveStatus.m_curArmPose[i]:=m_slaveArms[i].curCartPose;
	r_slaveStatus.m_curArmTwist[i]:=m_slaveArms[i].curCartTwist;
	// joint
	r_slaveJointsData.m_curMotorPos[i]:=m_slaveArms[i].curMotorPos;
	r_slaveJointsData.m_curLinkPos[i]:=m_slaveArms[i].curLinkPos;
	r_slaveJointsData.m_curJntPos[i]:=m_slaveArms[i].curJntPos;
	r_slaveJointsData.m_curJntVel[i]:=m_slaveArms[i].curJntVel;
	r_slaveJointsData.m_curJntTrq[i]:=m_slaveArms[i].curJntTrq;
	
	// command info
	// cartesion
	r_slaveStatus.m_cmdArmPose[i]:=m_armCtrlCmds[i].m_cmdCartPose;
	r_slaveStatus.m_cmdArmTwist[i]:=m_armCtrlCmds[i].m_cmdCartTwist;
	// joint info
	r_slaveJointsData.m_cmdJntPos[i]:=m_armCtrlCmds[i].m_cmdJntPos;
	r_slaveJointsData.m_cmdJntVel[i]:=m_armCtrlCmds[i].m_cmdJntVel;
	r_slaveJointsData.m_cmdJntTrq[i]:=m_armCtrlCmds[i].m_cmdJntTrq;
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{610a17f3-34c5-4e3c-bbbc-19f9c2f46946}">
      <Declaration><![CDATA[METHOD PUBLIC Init : BOOL
VAR_INPUT
END_VAR
VAR
	i:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO g_sArmNum DO
	// arm init
	m_slaveArms[i].Init(i);
	m_slaveArmState[i]:=SlaveArmState_Init;
	m_lastSlaveArmState[i]:=SlaveArmState_Init;
	m_nextSlaveArmState[i]:=SlaveArmState_Init;
	m_teleMasterArmIdx[i]:=MatchedMasterArmIdx_NULL;
	
	// command init
	m_armCtrlCmds[i].m_jntEnableFlag := g_zeroVec8i;
	m_armCtrlCmds[i].m_jntOPMode := g_slaveAllPosMode;
	m_armCtrlCmds[i].m_cmdCartPose := m_slaveArms[i].curCartPose;
	m_armCtrlCmds[i].m_cmdCartTwist := g_zeroVec6d;
	m_armCtrlCmds[i].m_cmdJntPos := m_slaveArms[i].curJntPos;
	m_armCtrlCmds[i].m_cmdJntVel := g_zeroVec8d;
	m_armCtrlCmds[i].m_cmdJntAcc := g_zeroVec8d;
	m_armCtrlCmds[i].m_cmdJntTrq := g_zeroVec8d;
	
	// generate controller factory
	m_armCtrlFactory[i,SlaveArmState_Error] := m_armError[i];
	m_armCtrlFactory[i,SlaveArmState_Init] := m_armInit[i];
	m_armCtrlFactory[i,SlaveArmState_SelfCheck] := m_armSelfCheck[i];
	m_armCtrlFactory[i,SlaveArmState_Standby] := m_armStandBy[i];
	m_armCtrlFactory[i,SlaveArmState_MountPanel] := m_mountPanel[i];
	m_armCtrlFactory[i,SlaveArmState_PanelReady] := m_panelReady[i];
	m_armCtrlFactory[i,SlaveArmState_Mountnstru] := m_mountInstru[i];
	m_armCtrlFactory[i,SlaveArmState_InstruReady] := m_instruReady[i];
	m_armCtrlFactory[i,SlaveArmState_MasterSlave] := m_armMasterSlave[i];
	m_armCtrlFactory[i,SlaveArmState_MountScope] := m_mountScope[i];
	m_armCtrlFactory[i,SlaveArmState_ScopeReady] := m_scopeReady[i];
	m_armCtrlFactory[i,SlaveArmState_EndoScope] := m_armEndoscope[i];
	m_armCtrlFactory[i,SlaveArmState_Cart] := m_armCart[i];
	m_armCtrlFactory[i,SlaveArmState_GravityCali] := m_armGraCali[i];
	
	// assign controller
	m_armCtrl[i]:=m_armCtrlFactory[i,m_slaveArmState[i]];
	m_armCtrl[i].Init(m_slaveArms[i],m_armCtrlCmds[i]);
END_FOR
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="run" Id="{ed6f787a-4dc0-4602-b386-92a3c3880a23}">
      <Declaration><![CDATA[METHOD PUBLIC run : BOOL
VAR_IN_OUT CONSTANT
	i_slaveInputDataPool:ST_SlaveInputDataPool;
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_motionScale := i_slaveInputDataPool.m_masterStatus.m_motionScale;

// state machine transition
stateMachine(i_slaveInputDataPool);

FOR i:=1 TO g_sArmNum DO
	// update dynamic data
	m_slaveArms[i].updateDyna(i_slaveInputDataPool.m_slaveDynaData);
								
	// update slave arm kinematics
	m_slaveArms[i].updateStatus();
	
	// null ptr check
	IF 0 = m_armCtrl[i] THEN
		EXIT;
	END_IF
	
	// run controller
	m_armCtrl[i].run(m_motionScale, m_teleMasterArmIdx[i], m_SlaveArms[i],
						i_slaveInputDataPool.m_MasterStatus,m_armCtrlCmds[i]);

	// update commands to drivers
	m_slaveArms[i].updateCmds(m_armCtrlCmds[i]);

END_FOR

]]></ST>
      </Implementation>
    </Method>
    <Method Name="stateMachine" Id="{b9cc8560-9309-49e3-93b5-28cb02b4f5cc}">
      <Declaration><![CDATA[// state machine check and transit 
METHOD PROTECTED stateMachine : BOOL
VAR_IN_OUT CONSTANT
		i_masterInputDataPool:ST_SlaveInputDataPool;
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO g_sArmNum DO
	// State machine transit 
	CASE m_slaveArmState[i] OF
		// init
		SlaveArmState_Init:
			IF m_armCtrl[i].isFinished  THEN
				m_nextSlaveArmState[i]:=SlaveArmState_SelfCheck;
			END_IF

		//self check
		SlaveArmState_SelfCheck:
			IF m_armCtrl[i].isFinished  THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			END_IF
		
		//mount panel
		SlaveArmState_MountPanel:
			IF m_armCtrl[i]. isFinished THEN
				m_nextSlaveArmState[i]:=SlaveArmState_PanelReady;
				
				// NOTICE: multiple cycles joints back to center during initialization
				// 			need to reset joints encoder data again
				m_slaveArms[i].initJntPos();
			END_IF
		
		//panel ready
		SlaveArmState_PanelReady:
(*		
		//standby
		SlaveArmState_Standby:
		
		
		//mount instrument
		SlaveArmState_Mountnstru:
		
		//mount instrument
		SlaveArmState_Mountnstru:
		
		//instrument ready
		SlaveArmState_InstruReady:
		
		//master-slave control
		SlaveArmState_MasterSlave:
		
		//mount endoscope
		SlaveArmState_MountScope:
		
		//endoscope ready
		SlaveArmState_ScopeReady:
		
		//endoscope control
		SlaveArmState_EndoScope:
		
		//cart control
		SlaveArmState_Cart:
*)
	END_CASE
	
	// Controller transit
	IF m_nextSlaveArmState[i]<> m_slaveArmState[i] THEN
		// reset current controller
		m_armCtrl[i].reset();
		
		// transit to new controller
		m_lastSlaveArmState[i]:=m_slaveArmState[i];
		m_slaveArmState[i]:=m_nextSlaveArmState[i];
		m_armCtrl[i]:=m_armCtrlFactory[i,m_slaveArmState[i]];
		
		// init next controller
		m_armCtrl[i].Init(m_slaveArms[i],m_armCtrlCmds[i]);
		m_slaveArms[i].updateCmds(m_armCtrlCmds[i]);
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveRobot">
      <LineId Id="60" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.checkTeleMasterArmIdx">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.getStatus">
      <LineId Id="23" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="57" Count="5" />
      <LineId Id="56" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.Init">
      <LineId Id="5" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="47" Count="4" />
      <LineId Id="80" Count="2" />
      <LineId Id="87" Count="5" />
      <LineId Id="94" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="62" Count="9" />
      <LineId Id="73" Count="0" />
      <LineId Id="108" Count="1" />
      <LineId Id="117" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="61" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.run">
      <LineId Id="78" Count="1" />
      <LineId Id="19" Count="2" />
      <LineId Id="11" Count="0" />
      <LineId Id="88" Count="1" />
      <LineId Id="97" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="73" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.stateMachine">
      <LineId Id="5" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="41" Count="2" />
      <LineId Id="45" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="147" Count="1" />
      <LineId Id="151" Count="1" />
      <LineId Id="154" Count="0" />
      <LineId Id="156" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="86" Count="3" />
      <LineId Id="95" Count="2" />
      <LineId Id="117" Count="20" />
      <LineId Id="116" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="56" Count="3" />
      <LineId Id="61" Count="2" />
      <LineId Id="65" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>