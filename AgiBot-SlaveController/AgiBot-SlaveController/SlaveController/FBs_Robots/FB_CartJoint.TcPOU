<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_CartJoint" Id="{28a097bf-9305-41bd-b49b-5cc15db4c0fc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CartJoint EXTENDS FB_JointBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//Cart motor output IO
	m_cartMotorOutput AT %Q*	:ST_CartMotorOutput;
	
	m_cmdAcc:LREAL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

]]></ST>
    </Implementation>
    <Method Name="cmd2motorMZ" Id="{ce51d928-9aec-47bd-8771-d90231cff44e}">
      <Declaration><![CDATA[METHOD cmd2motorMZ : DINT
VAR_INPUT
	i_cmd:LREAL;
	i_controlCycleTime :LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[cmd2motorMZ:=LREAL_TO_DINT(((4*m_motorEncoderRes*m_motorReduction*i_controlCycleTime)/(2*pi))*i_cmd*65536);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="enableMZ" Id="{c7c05849-8175-4bda-9e85-19e05e090d36}">
      <Declaration><![CDATA[METHOD PUBLIC enableMZ : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (MZDriverStatusWord_SwitchOnDisable AND m_motorInputs.m_statusWord) = MZDriverStatusWord_SwitchOnDisable    THEN
	m_motorOutputs.m_controlWord:=DriverCtrlWord_INIT;
	enableMZ := FALSE;
ELSIF (MZDriverStatusWord_OperationEnbale AND m_motorInputs.m_statusWord) = MZDriverStatusWord_OperationEnbale THEN
	enableMZ :=  TRUE;
ELSIF (MZDriverStatusWord_SwitchOn AND m_motorInputs.m_statusWord) =  MZDriverStatusWord_SwitchOn THEN
	m_motorOutputs.m_controlWord:=DriverCtrlWord_OP;
	enableMZ :=  FALSE;
ELSIF (MZDriverStatusWord_ReadyToSwitchOn AND m_motorInputs.m_statusWord) = MZDriverStatusWord_ReadyToSwitchOn THEN
	m_motorOutputs.m_controlWord:=DriverCtrlWord_PREOP;
	enableMZ :=  FALSE;
ELSIF (MZDriverStatusWord_Fault AND m_motorInputs.m_statusWord) = MZDriverStatusWord_Fault THEN
	m_motorOutputs.m_controlWord:=DriverCtrlWord_FaultReset;
//ELSE
//	m_motorOutputs.m_controlWord:=DriverCtrlWord_INIT;
//	enable :=  FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{bffc3b4d-b191-4c5f-9594-972a25277e80}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_INPUT
	i_jntIdx :INT;
	i_controlCycleTime :LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_jntIdx:=i_jntIdx;
m_cycleTime := i_controlCycleTime;

// hardware parameters
m_motorEncoderRes :=GVL_CartMotorParameters.g_incEncoderRes[i_jntIdx];
m_linkEncoderRes :=GVL_CartMotorParameters.g_absEncoderRes[i_jntIdx];
m_motorReduction :=GVL_CartMotorParameters.g_motorReduction[i_jntIdx];
m_linkEncoderReduction :=GVL_CartMotorParameters.g_absEncoderReduction[i_jntIdx];
m_trqConst :=GVL_CartMotorParameters.g_motorTrqConst[i_jntIdx];
m_maxCurrent :=GVL_CartMotorParameters.g_motorMaxCurrent[i_jntIdx];
m_motorDir :=GVL_CartMotorParameters.g_motorDir[i_jntIdx];								
m_minJntPos	:=GVL_CartMotorParameters.g_minJntPos[i_jntIdx];
m_maxJntPos	:=GVL_CartMotorParameters.g_maxJntPos[i_jntIdx];

//link encoder calibartion data
m_linkEncoderDir :=GVL_CartJointEncoderCaliData.g_asbEncoderDir[i_jntIdx];
m_minLinkEncoder :=GVL_CartJointEncoderCaliData.g_minLinkEncoder[ i_jntIdx] - m_linkEncoderDir*GVL_SetupJointEncoderCaliData.g_linkEncLimitBuffer; // expand limit
m_maxLinkEncoder :=GVL_CartJointEncoderCaliData.g_maxLinkEncoder[ i_jntIdx] + m_linkEncoderDir*GVL_SetupJointEncoderCaliData.g_linkEncLimitBuffer; // expand limit
m_caliLinkEncoder :=GVL_CartJointEncoderCaliData.g_caliLinkEncoder[ i_jntIdx];
m_linkEncCaliJntPos :=GVL_CartJointEncoderCaliData.g_linkEncCaliJntPos[i_jntIdx];
m_linkEncZeroCross :=GVL_CartJointEncoderCaliData.g_linkEncZeroCross[ i_jntIdx];
m_multiCycles :=GVL_CartJointEncoderCaliData.g_multipleCyclesJoint[i_jntIdx];

// convert cali link encoder if joint cross zero
IF 1=m_linkEncZeroCross THEN
	IF 1=m_linkEncoderDir AND m_caliLinkEncoder < m_minLinkEncoder THEN
		m_caliLinkEncoder := GVL_CartJointEncoderCaliData.g_caliLinkEncoder[ i_jntIdx] + m_linkEncoderRes;
	ELSIF -1=m_linkEncoderDir AND m_caliLinkEncoder < m_maxLinkEncoder THEN
		m_caliLinkEncoder := GVL_CartJointEncoderCaliData.g_caliLinkEncoder[ i_jntIdx] + m_linkEncoderRes;
	END_IF
END_IF

// macro data
m_trq2CurrentRatio:=m_motorDir * 1000.0/(m_trqConst*m_motorReduction);
m_current2TrqRatio:=m_motorDir * (m_trqConst*m_motorReduction)/1000.0;
m_linkEnc2PosRatio := 2*PI*m_linkEncoderDir/(m_linkEncoderReduction*m_linkEncoderRes);
m_motorEnc2PosRatio := 2*PI * m_motorDir/(m_motorReduction * m_motorEncoderRes);


// motor data init
m_rawJntVel :=0;
m_curJntVel:=0;
m_curJntTrq :=0;
m_rawCurrent :=0;
m_filtCurrent :=0;
m_cmdJntVel :=0.0;
m_cmdJntTrq :=0.0;
m_cmdCurrent := 0.0;

// filter init
m_jntVelLpf.init(1, GVL_CartControlParameters.g_curJntVelLpfCutoffFreq, g_cartCtrlFreq);
m_cmdTrqLpf.init(1, GVL_CartControlParameters.g_cmdJntTrqLpfCutoffFreq, g_cartCtrlFreq);
m_curTrqLpf.init(1, GVL_CartControlParameters.g_curJntTrqLpfCutoffFreq, g_cartCtrlFreq);

// driver init value
m_motorOutputs.m_controlWord:=DriverCtrlWord_INIT;
m_motorOutputs.m_opMode:=INT_TO_SINT(DriverOPMode_Pos);
m_motorOutputs.m_cmdCurrent:=0;
m_motorOutputs.m_cmdMotorEncoder:=m_motorInputs.m_motorEncoder;]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateCmd" Id="{3364c090-0425-4521-8bdc-ee7c5bc99a10}">
      <Declaration><![CDATA[METHOD PUBLIC updateCmd : BOOL
VAR_INPUT
	i_opMode : E_DriverOPMode;
	i_cmdPos :LREAL;
	i_cmdTrq :LREAL;
	i_cmdVel :LREAL;
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_motorOutputs.m_opMode:=INT_TO_SINT( i_opMode);

// pos mode
IF i_opMode = DriverOPMode_Pos OR i_opMode = DriverOPMode_cspMZ  THEN
	m_motorOutputs.m_cmdCurrent:=0;
	m_cmdJntPos :=i_cmdPos;
	m_motorOutputs.m_cmdMotorEncoder :=motorPos2Enc(m_cmdJntPos);
ELSIF i_opMode = DriverOPMode_Vel THEN
	m_cmdJntVel := i_cmdVel;
	m_cartMotorOutput.m_cmdVelMzVelMode := cmd2motorMZ(m_cmdJntVel, g_cartCtrlCycleTime);
ELSIF i_opMode = DriverOPMode_Trq THEN   //Here the torque mode is equal to the contour position mode of the MingZhi driver
	m_cmdJntVel := i_cmdVel;
	m_cmdAcc:=i_cmdVel*2;
	m_cmdJntPos:=i_cmdPos;
	m_cartMotorOutput.m_cmdAccMz :=cmd2motorMZ(m_cmdAcc, g_cartCtrlCycleTime);
	m_cartMotorOutput.m_cmdVelMz := cmd2motorMZ(m_cmdJntVel, g_cartCtrlCycleTime);
	m_motorOutputs.m_cmdMotorEncoder := motorPos2Enc(m_cmdJntVel);
ELSIF i_opMode = DriverOPMode_csvMZ THEN
	m_cmdJntVel := i_cmdVel;
	m_cartMotorOutput.m_cmdVelMzVelMode := cmd2motorMZ(m_cmdJntVel, g_cartCtrlCycleTime);
END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateStatus" Id="{73269784-dc20-4128-ac4c-d9260ed9266c}">
      <Declaration><![CDATA[METHOD PUBLIC updateStatus : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// compute joint position
m_curLinkPos:= linkEnc2Pos();
m_curMotorPos:=motorEnc2Pos();
m_curLinkSingle := m_curLinkPos - 2*PI* m_linkEncCycles;

// Cart joint1-4 have no link enconder, use motor position
IF m_jntIdx <= 4 THEN
	m_curJntPos := m_curMotorPos;
ELSE
	m_curJntPos := m_curLinkPos;
END_IF

// compute joint velocity
m_curVelCalCycles := m_curVelCalCycles+1;
IF m_curVelCalCycles > m_velCalcCycles THEN
	m_rawJntVel:= (m_curJntPos-m_lastJntPos)/(m_cycleTime*m_velCalcCycles);
	m_curJntVel := m_jntVelLpf.run(m_rawJntVel);
	m_lastJntPos :=m_curJntPos;	
	m_curVelCalCycles:=1;
END_IF


// current and torque
m_rawCurrent := m_motorInputs.m_current;
m_filtCurrent := m_curTrqLpf.run(m_rawCurrent);
m_curJntTrq := m_filtCurrent * m_current2TrqRatio;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CartJoint">
      <LineId Id="43" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_CartJoint.cmd2motorMZ">
      <LineId Id="20" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_CartJoint.enableMZ">
      <LineId Id="23" Count="2" />
      <LineId Id="41" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="30" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="31" Count="2" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_CartJoint.init">
      <LineId Id="171" Count="0" />
      <LineId Id="155" Count="1" />
      <LineId Id="89" Count="7" />
      <LineId Id="98" Count="3" />
      <LineId Id="163" Count="0" />
      <LineId Id="102" Count="15" />
      <LineId Id="122" Count="4" />
      <LineId Id="184" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="178" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="152" Count="1" />
      <LineId Id="133" Count="1" />
      <LineId Id="154" Count="0" />
      <LineId Id="148" Count="3" />
      <LineId Id="137" Count="5" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="FB_CartJoint.updateCmd">
      <LineId Id="20" Count="0" />
      <LineId Id="33" Count="2" />
      <LineId Id="32" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="68" Count="2" />
      <LineId Id="44" Count="0" />
    </LineIds>
    <LineIds Name="FB_CartJoint.updateStatus">
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="38" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="11" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>