<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_SetupJoint" Id="{6b084a85-8805-425b-acb2-a9c4952b134d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SetupJoint EXTENDS FB_JointBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="init" Id="{5a12a14b-8e26-44ab-8937-95ebfb655807}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_INPUT
	i_armIdx :INT;
	i_jntIdx :INT;
	i_controlCycleTime :LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_armIdx:=i_armIdx;
m_jntIdx:=i_jntIdx;
m_cycleTime := i_controlCycleTime;

// hardware parameters
m_motorEncoderRes :=GVL_SetupMotorParameters.g_incEncoderRes[i_jntIdx];
m_linkEncoderRes :=GVL_SetupMotorParameters.g_absEncoderRes[i_jntIdx];
m_motorReduction :=GVL_SetupMotorParameters.g_motorReduction[i_jntIdx];
m_linkEncoderReduction :=GVL_SetupMotorParameters.g_absEncoderReduction[i_jntIdx];
m_trqConst :=GVL_SetupMotorParameters.g_motorTrqConst[i_jntIdx];
m_maxCurrent :=GVL_SetupMotorParameters.g_motorMaxCurrent[i_jntIdx];
m_motorDir :=GVL_SetupMotorParameters.g_motorDir[i_jntIdx];								
m_minJntPos	:=GVL_SetupMotorParameters.g_minJntPos[m_armIdx,i_jntIdx];
m_maxJntPos	:=GVL_SetupMotorParameters.g_maxJntPos[m_armIdx,i_jntIdx];

//link encoder calibartion data
m_linkEncoderDir :=GVL_SetupJointEncoderCaliData.g_asbEncoderDir[i_jntIdx];
m_minLinkEncoder :=GVL_SetupJointEncoderCaliData.g_minLinkEncoder[i_armIdx, i_jntIdx] - m_linkEncoderDir*GVL_SlaveJointEncoderCaliData.g_linkEncLimitBuffer; // expand limit
m_maxLinkEncoder :=GVL_SetupJointEncoderCaliData.g_maxLinkEncoder[i_armIdx, i_jntIdx] + m_linkEncoderDir*GVL_SlaveJointEncoderCaliData.g_linkEncLimitBuffer; // expand limit
m_caliLinkEncoder :=GVL_SetupJointEncoderCaliData.g_caliLinkEncoder[i_armIdx, i_jntIdx];
m_linkEncCaliJntPos :=GVL_SetupJointEncoderCaliData.g_linkEncCaliJntPos[i_armIdx,i_jntIdx];
m_linkEncZeroCross :=GVL_SetupJointEncoderCaliData.g_linkEncZeroCross[i_armIdx, i_jntIdx];
m_multiCycles :=GVL_SetupJointEncoderCaliData.g_multipleCyclesJoint[i_armIdx,i_jntIdx];

// convert cali link encoder if joint cross zero
IF 1=m_linkEncZeroCross THEN
	IF 1=m_linkEncoderDir AND m_caliLinkEncoder < m_minLinkEncoder THEN
		m_caliLinkEncoder := GVL_SetupJointEncoderCaliData.g_caliLinkEncoder[i_armIdx, i_jntIdx] + m_linkEncoderRes;
	ELSIF -1=m_linkEncoderDir AND m_caliLinkEncoder < m_maxLinkEncoder THEN
		m_caliLinkEncoder := GVL_SetupJointEncoderCaliData.g_caliLinkEncoder[i_armIdx, i_jntIdx] + m_linkEncoderRes;
	END_IF
END_IF

// macro data
m_trq2CurrentRatio:=m_motorDir * 1000.0/(m_trqConst*m_motorReduction);
m_current2TrqRatio:=m_motorDir * (m_trqConst*m_motorReduction)/1000.0;
m_linkEnc2PosRatio := 2*PI*m_linkEncoderDir/(m_linkEncoderReduction*m_linkEncoderRes);
m_motorEnc2PosRatio := 2*PI * m_motorDir/(m_motorReduction * m_motorEncoderRes);

// motor data init
m_rawJntVel :=0;
m_curJntVel:=0;
m_curJntTrq :=0;
m_rawCurrent :=0;
m_filtCurrent :=0;
m_cmdJntVel :=0.0;
m_cmdJntTrq :=0.0;
m_cmdCurrent := 0.0;

// filter init
m_jntVelLpf.init(1, GVL_SetupControlParameters.g_curJntVelLpfCutoffFreq, g_setupArmCtrlFreq);
m_cmdTrqLpf.init(1, GVL_SetupControlParameters.g_cmdJntTrqLpfCutoffFreq, g_setupArmCtrlFreq);
m_curTrqLpf.init(1, GVL_SetupControlParameters.g_curJntTrqLpfCutoffFreq, g_setupArmCtrlFreq);

// driver init value
m_motorOutputs.m_controlWord:=DriverCtrlWord_INIT;
m_motorOutputs.m_opMode:=INT_TO_SINT(DriverOPMode_Pos);
m_motorOutputs.m_cmdCurrent:=0;
m_motorOutputs.m_cmdMotorEncoder:=m_motorInputs.m_motorEncoder;]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateStatus" Id="{34ceea2f-2bdd-4fbf-8a53-a09fb1bc6775}">
      <Declaration><![CDATA[METHOD PUBLIC updateStatus : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// compute joint position
m_curLinkPos:= linkEnc2Pos();
m_curMotorPos:=motorEnc2Pos();
m_curLinkSingle := m_curLinkPos - 2*PI* m_linkEncCycles;

// setup joint1/2 have no motor, use link position
IF m_jntIdx < 3 THEN
	m_curJntPos := m_curLinkPos;
ELSE
	m_curJntPos := m_curMotorPos;
END_IF

// compute joint velocity
m_curVelCalCycles := m_curVelCalCycles+1;
IF m_curVelCalCycles > m_velCalcCycles THEN
	m_rawJntVel:= (m_curJntPos-m_lastJntPos)/(m_cycleTime*m_velCalcCycles);
	m_curJntVel := m_jntVelLpf.run(m_rawJntVel);
	m_lastJntPos :=m_curJntPos;	
	m_curVelCalCycles:=1;
END_IF


// current and torque
m_rawCurrent := m_motorInputs.m_current;
m_filtCurrent := m_curTrqLpf.run(m_rawCurrent);
m_curJntTrq := m_filtCurrent * m_current2TrqRatio;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SetupJoint">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupJoint.init">
      <LineId Id="170" Count="1" />
      <LineId Id="155" Count="1" />
      <LineId Id="89" Count="7" />
      <LineId Id="98" Count="3" />
      <LineId Id="163" Count="0" />
      <LineId Id="102" Count="15" />
      <LineId Id="122" Count="6" />
      <LineId Id="178" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="152" Count="1" />
      <LineId Id="133" Count="1" />
      <LineId Id="154" Count="0" />
      <LineId Id="148" Count="3" />
      <LineId Id="137" Count="5" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupJoint.updateStatus">
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="38" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="11" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>