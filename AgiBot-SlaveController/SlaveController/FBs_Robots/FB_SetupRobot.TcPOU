<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_SetupRobot" Id="{41d3f45b-28bf-4672-9f4d-c2ea05b7f776}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SetupRobot
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// setup arms, responsible for arm kinematic and control
	m_setupArms :ARRAY[1..g_sArmNum] OF FB_SetupArm;
	
	// arm state
	m_setupArmState:ARRAY[1..g_sArmNum] OF E_setupArmState:=[4(E_setupArmState.SetupArmState_Init)];
	m_lastSetupArmState:ARRAY[1..g_sArmNum] OF E_setupArmState:=[4(E_setupArmState.SetupArmState_Init)];
	m_nextSetupArmState:ARRAY[1..g_sArmNum] OF E_setupArmState:=[4(E_setupArmState.SetupArmState_Init)];
	
	// all arm controller instance 
	m_armCtrlFactory :ARRAY[1..g_sArmNum,1..SetupArmState_totalNum] OF I_SetupArmCtrl;
	m_armInit :ARRAY[1..g_sArmNum] OF FB_SetupCtrlInit;
	m_armError :ARRAY[1..g_sArmNum] OF FB_SetupCtrlError;
	m_armSelfCheck :ARRAY[1..g_sArmNum] OF FB_SetupCtrlSelfCheck;
	m_armHold :ARRAY[1..g_sArmNum] OF FB_SetupCtrlHold;
	m_armManualAdjust :ARRAY[1..g_sArmNum] OF FB_SetupCtrlManualAdjust;
	m_armAutoAdjust :ARRAY[1..g_sArmNum] OF FB_SetupCtrlAutoAdjust;
	m_armPackage :ARRAY[1..g_sArmNum] OF FB_SetupCtrlPackage;
	m_armCart :ARRAY[1..g_sArmNum] OF FB_SetupCtrlCart;
	m_armJnt3GraCali :ARRAY[1..g_sArmNum] OF FB_SetupCtrlJnt3GraCali;
	m_armJnt5GraCali :ARRAY[1..g_sArmNum] OF FB_SetupCtrlJnt5GraCali;
	
	
	// arm controller interface
	m_armCtrl :ARRAY[1..g_sArmNum] OF I_SetupArmCtrl;
	m_armCtrlCmds :ARRAY[1..g_sArmNum] OF ST_SetupArmCtrlCmds;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

]]></ST>
    </Implementation>
    <Method Name="getStatus" Id="{87cb863f-d525-453d-a0db-af97bcb1e34e}">
      <Declaration><![CDATA[METHOD PUBLIC getStatus : BOOL
VAR_IN_OUT
	// slave robot information, including arm status and cartesian data
	r_setupStatus :ST_SetupStatus;
	
	// slave robot joint data
	r_setupJointsData :ST_SetupJointData;
	
END_VAR

VAR
	i:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[r_setupStatus.m_armState:=m_setupArmState;

// TODO: project cartesion data to monitor coordinate
FOR i:=1 TO g_sArmNum DO
	
	// cartesion
	r_setupStatus.m_curEndPose[i]:=m_setupArms[i].curCartPose;
	r_setupStatus.m_rcPos[i]:=m_setupArms[i].rcPos;
	
	// joint
	r_setupJointsData.m_curMotorPos[i]:=m_setupArms[i].curMotorPos;
	r_setupJointsData.m_curLinkPos[i]:=m_setupArms[i].curLinkPos;
	r_setupJointsData.m_curJntPos[i]:=m_setupArms[i].curJntPos;
	r_setupJointsData.m_curJntVel[i]:=m_setupArms[i].curJntVel;
	r_setupJointsData.m_curJntTrq[i]:=m_setupArms[i].curJntTrq;
	
	// command info
	// joint info
	r_setupJointsData.m_cmdJntPos[i]:=m_armCtrlCmds[i].m_cmdJntPos;
	r_setupJointsData.m_cmdJntVel[i]:=m_armCtrlCmds[i].m_cmdJntVel;
	r_setupJointsData.m_cmdJntTrq[i]:=m_armCtrlCmds[i].m_cmdJntTrq;
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{0db3a443-112b-48f7-898b-6b92ed428f2d}">
      <Declaration><![CDATA[METHOD PUBLIC Init : BOOL
VAR_INPUT
END_VAR
VAR
	i:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO g_sArmNum DO
	// arm init
	m_setupArms[i].Init(i);
	m_setupArmState[i]:=SlaveArmState_Init;
	m_lastSetupArmState[i]:=SlaveArmState_Init;
	m_nextSetupArmState[i]:=SlaveArmState_Init;
	
	// command init
	m_armCtrlCmds[i].m_jntEnableFlag := g_zeroVec5i;
	m_armCtrlCmds[i].m_jntOPMode := g_setupAllPosMode;
	m_armCtrlCmds[i].m_cmdJntPos := m_setupArms[i].curJntPos;
	m_armCtrlCmds[i].m_cmdJntVel := g_zeroVec5d;
	m_armCtrlCmds[i].m_cmdJntAcc := g_zeroVec5d;
	m_armCtrlCmds[i].m_cmdJntTrq := g_zeroVec5d;
	
	// generate controller factory
	m_armCtrlFactory[i,SetupArmState_Error] := m_armError[i];
	m_armCtrlFactory[i,SetupArmState_Init] := m_armInit[i];
	m_armCtrlFactory[i,SetupArmState_SelfCheck] := m_armSelfCheck[i];
	m_armCtrlFactory[i,SetupArmState_Hold] := m_armHold[i];
	m_armCtrlFactory[i,SetupArmState_ManualAdjust] := m_armManualAdjust[i];
	m_armCtrlFactory[i,SetupArmState_AutoAdjust] := m_armAutoAdjust[i];
	m_armCtrlFactory[i,SetupArmState_Package] := m_armPackage[i];
	m_armCtrlFactory[i,SetupArmState_Cart] := m_armCart[i];
	m_armCtrlFactory[i,SetupArmState_jnt3GravityCali] := m_armJnt3GraCali[i];
	m_armCtrlFactory[i,SetupArmState_jnt5GravityCali] := m_armJnt5GraCali[i];
	
	// assign controller
	m_armCtrl[i]:=m_armCtrlFactory[i,m_setupArmState[i]];
	m_armCtrl[i].Init(m_setupArms[i],m_armCtrlCmds[i]);
END_FOR
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="run" Id="{00eef043-1869-4f40-8399-c0641788ce23}">
      <Declaration><![CDATA[METHOD PUBLIC run : BOOL
VAR_IN_OUT CONSTANT
	i_setupInputDataPool:ST_SetupInputDataPool;
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state machine transition
stateMachine(i_setupInputDataPool);

FOR i:=1 TO g_sArmNum DO
	// update dynamic data
	m_setupArms[i].updateDyna(i_setupInputDataPool.m_setupJnt3Gravity[i], i_setupInputDataPool.m_setupJnt5Gravity[i]);
								
	// update slave arm kinematics
	m_setupArms[i].updateStatus();
	
	// null ptr check
	IF 0 = m_armCtrl[i] THEN
		EXIT;
	END_IF
	
	// run controller
	m_armCtrl[i].run(m_setupArms[i],m_armCtrlCmds[i]);

	// update commands to drivers
	m_setupArms[i].updateCmds(m_armCtrlCmds[i]);

END_FOR

]]></ST>
      </Implementation>
    </Method>
    <Method Name="stateMachine" Id="{ec1b7cf8-3c23-4752-ad51-56e56c84a99b}">
      <Declaration><![CDATA[// state machine check and transit 
METHOD PROTECTED stateMachine : BOOL
VAR_IN_OUT CONSTANT
		i_setupInputDataPool:ST_SetupInputDataPool;
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO g_sArmNum DO
	// State machine transit 
	CASE m_setupArmState[i] OF
		// init
		SetupArmState_Init:
			IF m_armCtrl[i].isFinished  THEN
				m_nextSetupArmState[i]:=SetupArmState_SelfCheck;
			END_IF

		//self check
		SetupArmState_SelfCheck:
			IF m_armCtrl[i].isFinished  THEN
				m_nextSetupArmState[i]:=SetupArmState_Hold;
			END_IF
		
		//hold
		SetupArmState_Hold:
			// to manual adjust
			IF m_setupArms[i].manualAdjustOn THEN
				m_nextSetupArmState[i]:=SetupArmState_ManualAdjust;
			// to auto adjust
			ELSIF m_setupArms[i].autoAdjustDir<>0 THEN
				m_nextSetupArmState[i]:=SetupArmState_AutoAdjust;
			END_IF
			
		
		// manual adjust
		SetupArmState_ManualAdjust:
			// to hold
			IF NOT(m_setupArms[i].manualAdjustOn) THEN
				m_nextSetupArmState[i] := SetupArmState_Hold;
			END_IF
			
		// auto adjust
		SetupArmState_AutoAdjust:
			// to hold
			IF m_setupArms[i].autoAdjustDir = 0 THEN
				m_nextSetupArmState[i] := SetupArmState_Hold;
			END_IF
			
		//package
		SetupArmState_Package:
		
		//cart
		SetupArmState_Cart:
		
		//joint 5 gravity calibration
		SetupArmState_jnt5GravityCali:
			IF m_armCtrl[i].isFinished  THEN
				m_nextSetupArmState[i]:=SetupArmState_Hold;
			END_IF 
		
	END_CASE
	
	// Controller transit
	IF m_nextSetupArmState[i]<> m_setupArmState[i] THEN
		// reset current controller
		m_armCtrl[i].reset();
		
		// transit to new controller
		m_lastSetupArmState[i]:=m_setupArmState[i];
		m_setupArmState[i]:=m_nextSetupArmState[i];
		m_armCtrl[i]:=m_armCtrlFactory[i,m_setupArmState[i]];
		
		// init next controller
		m_armCtrl[i].Init(m_setupArms[i],m_armCtrlCmds[i]);
		m_setupArms[i].updateCmds(m_armCtrlCmds[i]);
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SetupRobot">
      <LineId Id="60" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupRobot.getStatus">
      <LineId Id="23" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="57" Count="5" />
      <LineId Id="56" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupRobot.Init">
      <LineId Id="5" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="47" Count="3" />
      <LineId Id="80" Count="2" />
      <LineId Id="87" Count="0" />
      <LineId Id="90" Count="2" />
      <LineId Id="94" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="62" Count="5" />
      <LineId Id="108" Count="1" />
      <LineId Id="117" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="61" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupRobot.run">
      <LineId Id="19" Count="2" />
      <LineId Id="11" Count="0" />
      <LineId Id="88" Count="1" />
      <LineId Id="97" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="73" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupRobot.stateMachine">
      <LineId Id="5" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="41" Count="2" />
      <LineId Id="45" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="211" Count="0" />
      <LineId Id="169" Count="1" />
      <LineId Id="212" Count="0" />
      <LineId Id="192" Count="1" />
      <LineId Id="171" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="213" Count="7" />
      <LineId Id="225" Count="0" />
      <LineId Id="222" Count="2" />
      <LineId Id="221" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="117" Count="5" />
      <LineId Id="202" Count="1" />
      <LineId Id="201" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="56" Count="3" />
      <LineId Id="61" Count="2" />
      <LineId Id="65" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>