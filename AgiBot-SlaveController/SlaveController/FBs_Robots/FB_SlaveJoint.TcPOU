<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SlaveJoint" Id="{13c09c14-ad6e-446d-ae84-5ae40081815a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SlaveJoint EXTENDS FB_JointBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// power box joint motor rated current
	m_wristJntRatedCurrent : DINT := 200;

END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="init" Id="{bb8f175e-da72-49b5-bd9c-d829c633838e}">
      <Declaration><![CDATA[METHOD init : BOOL
VAR_INPUT
	i_armIdx :INT;
	i_jntIdx :INT;
	i_controlCycleTime :LREAL;
	// velocity is calculated every (m_velCalcCycles) control cycles
	// TODO: insturment joint motor can not reach 4k now, so calculate their velocity with 1k frequency, need to remove later
	i_velCalcCycles :INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_armIdx:=i_armIdx;
m_jntIdx:=i_jntIdx;
m_cycleTime := i_controlCycleTime;
m_velCalcCycles :=MAX(i_velCalcCycles,1);

// hardware parameters
m_motorEncoderRes :=GVL_SlaveMotorParameters.g_incEncoderRes[i_jntIdx];
m_linkEncoderRes :=GVL_SlaveMotorParameters.g_absEncoderRes[i_jntIdx];
m_motorReduction :=GVL_SlaveMotorParameters.g_motorReduction[i_jntIdx];
m_linkEncoderReduction :=GVL_SlaveMotorParameters.g_absEncoderReduction[i_jntIdx];
m_trqConst :=GVL_SlaveMotorParameters.g_motorTrqConst[i_jntIdx];
m_maxCurrent :=GVL_SlaveMotorParameters.g_motorMaxCurrent[i_jntIdx];
m_motorDir :=GVL_SlaveMotorParameters.g_motorDir[i_jntIdx];								
m_minJntPos	:=GVL_SlaveMotorParameters.g_minJntPos[i_jntIdx];
m_maxJntPos	:=GVL_SlaveMotorParameters.g_maxJntPos[i_jntIdx];

//link encoder calibartion data
m_linkEncoderDir :=GVL_SlaveJointEncoderCaliData.g_asbEncoderDir[i_jntIdx];
m_minLinkEncoder :=GVL_SlaveJointEncoderCaliData.g_minLinkEncoder[i_armIdx, i_jntIdx] - m_linkEncoderDir*GVL_SlaveJointEncoderCaliData.g_linkEncLimitBuffer; // expand limit
m_maxLinkEncoder :=GVL_SlaveJointEncoderCaliData.g_maxLinkEncoder[i_armIdx, i_jntIdx] + m_linkEncoderDir*GVL_SlaveJointEncoderCaliData.g_linkEncLimitBuffer; // expand limit
m_caliLinkEncoder :=GVL_SlaveJointEncoderCaliData.g_caliLinkEncoder[i_armIdx, i_jntIdx];
m_linkEncCaliJntPos :=GVL_SlaveJointEncoderCaliData.g_linkEncCaliJntPos[i_jntIdx];
m_linkEncZeroCross :=GVL_SlaveJointEncoderCaliData.g_linkEncZeroCross[i_armIdx, i_jntIdx];
m_multiCycles :=GVL_SlaveJointEncoderCaliData.g_multipleCyclesJoint[i_armIdx,i_jntIdx];

// convert cali link encoder if joint cross zero
IF 1=m_linkEncZeroCross THEN
	IF 1=m_linkEncoderDir AND m_caliLinkEncoder < m_minLinkEncoder THEN
		m_caliLinkEncoder := GVL_SlaveJointEncoderCaliData.g_caliLinkEncoder[i_armIdx, i_jntIdx] + m_linkEncoderRes;
	ELSIF -1=m_linkEncoderDir AND m_caliLinkEncoder < m_maxLinkEncoder THEN
		m_caliLinkEncoder := GVL_SlaveJointEncoderCaliData.g_caliLinkEncoder[i_armIdx, i_jntIdx] + m_linkEncoderRes;
	END_IF
END_IF

// macro data
m_trq2CurrentRatio:=m_motorDir * 1000.0/(m_trqConst*m_motorReduction);
m_current2TrqRatio:=m_motorDir * (m_trqConst*m_motorReduction)/1000.0;
m_linkEnc2PosRatio := 2*PI*m_linkEncoderDir/(m_linkEncoderReduction*m_linkEncoderRes);
m_motorEnc2PosRatio := 2*PI * m_motorDir/(m_motorReduction * m_motorEncoderRes);

// motor data init
m_rawJntVel :=0;
m_curJntVel:=0;
m_curJntTrq :=0;
m_rawCurrent :=0;
m_filtCurrent :=0;
m_cmdJntVel :=0.0;
m_cmdJntTrq :=0.0;
m_cmdCurrent := 0.0;

// filter init
m_jntVelLpf.init(1, GVL_SlaveControlParameters.g_curJntVelLpfCutoffFreq, g_slaveArmCtrlFreq/m_velCalcCycles);
m_cmdTrqLpf.init(1, GVL_SlaveControlParameters.g_cmdJntTrqLpfCutoffFreq, g_slaveArmCtrlFreq);
m_curTrqLpf.init(1, GVL_SlaveControlParameters.g_curJntTrqLpfCutoffFreq, g_slaveArmCtrlFreq);

// driver init value
m_motorOutputs.m_controlWord:=DriverCtrlWord_INIT;
m_motorOutputs.m_opMode:=INT_TO_SINT(DriverOPMode_Pos);
m_motorOutputs.m_cmdCurrent:=0;
m_motorOutputs.m_cmdMotorEncoder:=m_motorInputs.m_motorEncoder;]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateCmds" Id="{7d521106-f9be-4875-aa3c-95da24ffbb4d}">
      <Declaration><![CDATA[METHOD PUBLIC updateCmds : BOOL
VAR_INPUT
	i_opMode : E_DriverOPMode;
	i_cmdPos :LREAL;
	i_cmdTrq :LREAL;
END_VAR
VAR
	filtCmdTrq :LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.updateCmds(i_opMode, i_cmdPos, i_cmdTrq);

// write SDO data
//writeSDOData();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="writeSDOData" Id="{4c8048b7-1ef2-4f10-b4f9-05c2da6e4dfa}">
      <Declaration><![CDATA[METHOD PROTECTED writeSDOData : BOOL
VAR_INPUT
END_VAR
VAR
	SDOSubIndexMode :WORD;
	SDOSubIndexCur :WORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//动力盒移动关节和器械旋转关节，共享一个控制字，由SDO写入
IF (m_jntIdx=3) OR (m_jntIdx=8)  THEN
	SDOSubIndexMode :=16#609B;
	SDOSubIndexCur:=16#6098;
//动力盒3、5号电机为一个驱动器，共享一个控制字，由SDO写入
ELSIF (m_jntIdx=4) OR (m_jntIdx=6)  THEN
	SDOSubIndexMode :=16#609C;
	SDOSubIndexCur:=16#6099;
//动力盒2、4号电机为一个驱动器，共享一个控制字，由SDO写入
ELSIF (m_jntIdx=5) OR (m_jntIdx=7)  THEN
	SDOSubIndexMode :=16#609D;
	SDOSubIndexCur:=16#609A;
END_IF

IF m_jntIdx <3 THEN
	RETURN;
END_IF

// write driver operation mode if it changs
IF  m_jntIdx >=3 AND m_jntIdx <=7 THEN
	m_opModeSDOWrite(sNetID:= GVL_SlaveJointEncoderCaliData.g_slaveArmNetID[m_armIdx],
					nSlaveAddr := GVL_SlaveJointEncoderCaliData.g_slaveJointNetPort[m_armIdx,m_jntIdx],
					nSubIndex:=0,nIndex:=SDOSubIndexMode,pSrcBuf:=ADR(m_motorOutputs.m_opMode),cbBufLen:=SIZEOF(m_motorOutputs.m_opMode),bExecute:=TRUE);
	IF NOT m_opModeSDOWrite.bBusy THEN
		m_opModeSDOWrite(bExecute:=FALSE);
	END_IF
END_IF

// write max motor current if it changes and works in position mode
IF m_jntIdx >=4 AND m_jntIdx <=8  THEN 
	m_MotorCurrentSDOWrite(sNetID:= GVL_SlaveJointEncoderCaliData.g_slaveArmNetID[m_armIdx],
					nSlaveAddr := GVL_SlaveJointEncoderCaliData.g_slaveJointNetPort[m_armIdx,m_jntIdx],
					nSubIndex:=0,nIndex:=SDOSubIndexCur,pSrcBuf:=ADR(m_wristJntRatedCurrent),cbBufLen:=SIZEOF(m_wristJntRatedCurrent),bExecute:=TRUE);
	IF NOT m_MotorCurrentSDOWrite.bBusy THEN
		m_MotorCurrentSDOWrite(bExecute:=FALSE);
	END_IF
END_IF



]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveJoint">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveJoint.init">
      <LineId Id="187" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="89" Count="7" />
      <LineId Id="98" Count="3" />
      <LineId Id="176" Count="0" />
      <LineId Id="102" Count="15" />
      <LineId Id="122" Count="6" />
      <LineId Id="197" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="152" Count="1" />
      <LineId Id="133" Count="1" />
      <LineId Id="154" Count="0" />
      <LineId Id="148" Count="3" />
      <LineId Id="137" Count="5" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveJoint.updateCmds">
      <LineId Id="53" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="62" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveJoint.writeSDOData">
      <LineId Id="160" Count="12" />
      <LineId Id="209" Count="0" />
      <LineId Id="173" Count="2" />
      <LineId Id="198" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="176" Count="5" />
      <LineId Id="196" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="183" Count="4" />
      <LineId Id="101" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="65" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>