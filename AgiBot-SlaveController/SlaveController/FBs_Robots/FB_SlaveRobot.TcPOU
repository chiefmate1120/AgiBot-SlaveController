<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SlaveRobot" Id="{8cbdb2ba-9735-46e3-8cbc-296330acc8cc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SlaveRobot
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// flag if robot self-check passed
	m_selfCheckPass :ARRAY[1..g_sArmNum] OF BOOL :=[4(false)];
	
	// flag if master are connected
	m_masterOnLine :BOOL :=FALSE;
	m_masterOnLineCheck :FB_masterConnectionCheck;
	
	// master-slave motion scale
	m_motionScale :LREAL;
	
	// index(0 to 4) of slave arm which is tele-linked to master arm
	m_teleSlaveArmIdx :ARRAY[1..g_mArmNum] OF E_MatchedSlaveArmIdx;
	
	// flag if endoscope is mounted
	m_endoscopeMounted :BOOL := FALSE;
	
	// endoscope pose in cart coordinate
	m_endoscopePose : ST_Frame;
	
	// endoscope type 
	m_endoscopeType : E_EndoscopeType:= EndoScopeType_30;
	m_lastEndoScopePostureRobot : E_EndoscopePosture:= EndoScopePosture_HeadDown;
	m_lastEndoScopePostureUI : E_EndoscopePosture:= EndoScopePosture_HeadDown;
	
	// slave arms, responsible for arm kinematic and control
	m_slaveArms :ARRAY[1..g_sArmNum] OF FB_SlaveArm;
	
	// arm light control word
	m_lightCrlWord :ARRAY [1..4] OF UDINT;
	
	// arm state
	m_slaveArmState:ARRAY[1..g_sArmNum] OF E_SlaveArmState:=[4(E_SlaveArmState.SlaveArmState_Error)];
	m_lastSlaveArmState:ARRAY[1..g_sArmNum] OF E_SlaveArmState:=[4(E_SlaveArmState.SlaveArmState_Error)];
	m_nextSlaveArmState:ARRAY[1..g_sArmNum] OF E_SlaveArmState:=[4(E_SlaveArmState.SlaveArmState_Error)];
	
	// matched master arm state
	m_matchedMasterArmState :ARRAY[1..g_sArmNum] OF E_MasterArmState:=[4(E_MasterArmState.MasterArmState_Error)];
	
	// flag if panel and instrument mounted
	m_panelMountedFlag :ARRAY[1..g_sArmNum] OF BOOL :=[4(FALSE)];
	m_instrumentMountedFlag :ARRAY[1..g_sArmNum] OF BOOL :=[4(FALSE)];
	
	// flag if enable instrument invasion after it mounted
	m_instruInvasionEnableFlag :ARRAY[1..g_sArmNum] OF BOOL :=[4(FALSE)];
	
	// all arm controller instance 
	m_armCtrlFactory :ARRAY[1..g_sArmNum,1..SlaveArmState_totalNum] OF I_SlaveArmCtrl;
	m_armError :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlError;
	m_armInit :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlInit;
	m_armSelfCheck :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlSelfCheck;
	m_armStandBy :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlStandBy;
	m_mountPanel :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlMountPanel;
	m_panelReady :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlPanelReady;
	m_mountInstru :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlMountInstru;
	m_instruReady :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlInstruReady;
	m_armMasterSlave :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlMasterSlave;
	m_scopeReady :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlScopeReady;
	m_armEndoscope :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlEndoscope;
	m_armAdjust :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlAdjust;
	m_armPackage :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlPackage;
	m_armCart :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlCart;
	m_armGraCali :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlGraCali;
	m_armTest :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlTest;
	m_instruRetract :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlInstruRetract;
	m_instruInvasion :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlInstruInvasion;
	m_armDisable :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlDisable;
	m_instruCali :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlInstruCali;
	m_scopeToggle :ARRAY[1..g_sArmNum] OF FB_SlaveCtrlScopeToggle;
	
	// arm controller interface
	m_armCtrl :ARRAY[1..g_sArmNum] OF I_SlaveArmCtrl;
	m_armCtrlCmds :ARRAY[1..g_sArmNum] OF ST_SlaveArmCtrlCmds;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

]]></ST>
    </Implementation>
    <Method Name="controllerTransit" Id="{8f288ee3-c1dd-4604-a493-d121fbcd6b66}">
      <Declaration><![CDATA[METHOD PROTECTED controllerTransit : BOOL
VAR_INPUT
END_VAR
VAR
	i:int;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO g_sArmNum DO 
	// Controller transit
	IF m_nextSlaveArmState[i]<> m_slaveArmState[i] THEN
		// reset current controller
		m_armCtrl[i].reset();
		
		// transit to new controller
		m_lastSlaveArmState[i]:=m_slaveArmState[i];
		m_slaveArmState[i]:=m_nextSlaveArmState[i];
		m_armCtrl[i]:=m_armCtrlFactory[i,m_slaveArmState[i]];
		
		// init next controller
		m_armCtrl[i].Init(m_slaveArms[i],m_armCtrlCmds[i]);
		m_slaveArms[i].updateCmds(m_armCtrlCmds[i]);
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="getStatus" Id="{b6139e8c-2703-424c-9761-ad1add6b1ff1}">
      <Declaration><![CDATA[METHOD PUBLIC getStatus : BOOL
VAR_IN_OUT
	// slave robot information, including arm status and cartesian data
	r_slaveStatus :ST_SlaveStatus;
	
	// slave robot joint data
	r_slaveJointsData :ST_SlaveJointData;
	
END_VAR

VAR
	i:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[r_slaveStatus.m_armState:=m_slaveArmState;
r_slaveStatus.m_endoscopeMounted :=m_endoscopeMounted;
r_slaveStatus.m_endoscopePose :=m_endoscopePose;

FOR i:=1 TO g_sArmNum DO
	r_slaveStatus.m_selfCheckPass[i] := m_selfCheckPass[i];	

	// instrument data
	r_slaveStatus.m_instruStauts[i].m_type:=m_slaveArms[i].instrument.m_instruType;
	r_slaveStatus.m_instruStauts[i].m_ready:=m_instrumentMountedFlag[i];
	r_slaveStatus.m_instruStauts[i].m_fingerAngle:=m_slaveArms[i].curGripAngle;
	
	// cartesion
	r_slaveStatus.m_curArmPose[i]:=m_slaveArms[i].curCartPose;
	r_slaveStatus.m_simArmPose[i]:=m_slaveArms[i].simCartPose;
	r_slaveStatus.m_curArmTwist[i]:=m_slaveArms[i].curCartTwist;
	r_slaveStatus.m_masterSlavePoseError[i] := m_armMasterSlave[i].masterSlavePoseErr;
	// joint
	r_slaveJointsData.m_curMotorPos[i]:=m_slaveArms[i].curMotorPos;
	r_slaveJointsData.m_curLinkPos[i]:=m_slaveArms[i].curLinkPos;
	r_slaveJointsData.m_curJntPos[i]:=m_slaveArms[i].curJntPos;
	r_slaveJointsData.m_curJntVel[i]:=m_slaveArms[i].curJntVel;
	r_slaveJointsData.m_curJntTrq[i]:=m_slaveArms[i].curJntTrq;
	
	// command info
	// cartesion
	r_slaveStatus.m_cmdArmPose[i]:=m_slaveArms[i].cmdCartPose;
	r_slaveStatus.m_cmdArmTwist[i]:=m_slaveArms[i].cmdCartTwist;
	// joint info
	r_slaveJointsData.m_cmdJntPos[i]:=m_slaveArms[i].cmdJntPos;
	r_slaveJointsData.m_cmdJntVel[i]:=m_slaveArms[i].cmdJntVel;
	r_slaveJointsData.m_cmdJntTrq[i]:=m_slaveArms[i].cmdJntTrq;
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{610a17f3-34c5-4e3c-bbbc-19f9c2f46946}">
      <Declaration><![CDATA[METHOD PUBLIC Init : BOOL
VAR_INPUT
END_VAR
VAR
	i:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO g_sArmNum DO
	// arm init
	m_slaveArms[i].Init(i);
	m_slaveArmState[i]:=SlaveArmState_Init;
	m_lastSlaveArmState[i]:=SlaveArmState_Init;
	m_nextSlaveArmState[i]:=SlaveArmState_Init;
	m_selfCheckPass[i]:=false;
	
	// command init
	m_armCtrlCmds[i].m_jntEnableFlag := g_zeroVec8i;
	m_armCtrlCmds[i].m_jntOPMode := g_slaveAllPosMode;
	m_armCtrlCmds[i].m_cmdCartPose := m_slaveArms[i].curCartPose;
	m_armCtrlCmds[i].m_cmdCartTwist := g_zeroVec6d;
	m_armCtrlCmds[i].m_cmdJntPos := m_slaveArms[i].curJntPos;
	m_armCtrlCmds[i].m_cmdJntVel := g_zeroVec8d;
	m_armCtrlCmds[i].m_cmdJntAcc := g_zeroVec8d;
	m_armCtrlCmds[i].m_cmdJntTrq := g_zeroVec8d;
	
	// generate controller factory
	m_armCtrlFactory[i,SlaveArmState_Error] := m_armError[i];
	m_armCtrlFactory[i,SlaveArmState_Init] := m_armInit[i];
	m_armCtrlFactory[i,SlaveArmState_SelfCheck] := m_armSelfCheck[i];
	m_armCtrlFactory[i,SlaveArmState_Standby] := m_armStandBy[i];
	m_armCtrlFactory[i,SlaveArmState_MountPanel] := m_mountPanel[i];
	m_armCtrlFactory[i,SlaveArmState_PanelReady] := m_panelReady[i];
	m_armCtrlFactory[i,SlaveArmState_MountInstru] := m_mountInstru[i];
	m_armCtrlFactory[i,SlaveArmState_InstruReady] := m_instruReady[i];
	m_armCtrlFactory[i,SlaveArmState_MasterSlave] := m_armMasterSlave[i];
	m_armCtrlFactory[i,SlaveArmState_ScopeReady] := m_scopeReady[i];
	m_armCtrlFactory[i,SlaveArmState_EndoScope] := m_armEndoscope[i];
	m_armCtrlFactory[i,SlaveArmState_Adjust] := m_armAdjust[i];
	m_armCtrlFactory[i,SlaveArmState_Package] := m_armPackage[i];
	m_armCtrlFactory[i,SlaveArmState_Cart] := m_armCart[i];
	m_armCtrlFactory[i,SlaveArmState_GravityCali] := m_armGraCali[i];
	m_armCtrlFactory[i,SlaveArmState_Test] := m_armTest[i];
	m_armCtrlFactory[i,SlaveArmState_InstruRetract] := m_instruRetract[i];
	m_armCtrlFactory[i,SlaveArmState_InstruInvasion] := m_instruInvasion[i];
	m_armCtrlFactory[i,SlaveArmState_Disable] := m_armDisable[i];
	m_armCtrlFactory[i,SlaveArmState_InstruCali] := m_instruCali[i];
	m_armCtrlFactory[i,SlaveArmState_ScopeToggle] := m_scopeToggle[i];
	
	// assign controller
	m_armCtrl[i]:=m_armCtrlFactory[i,m_slaveArmState[i]];
	m_armCtrl[i].Init(m_slaveArms[i],m_armCtrlCmds[i]);
END_FOR
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="run" Id="{ed6f787a-4dc0-4602-b386-92a3c3880a23}">
      <Declaration><![CDATA[METHOD PUBLIC run : BOOL
VAR_IN_OUT CONSTANT
	i_slaveInputDataPool:ST_SlaveInputDataPool;
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_motionScale := i_slaveInputDataPool.m_masterStatus.m_motionScale;
m_teleSlaveArmIdx := i_slaveInputDataPool.m_masterStatus.m_teleSlaveArmIdx;

// check master connection
m_masterOnLine := m_masterOnLineCheck.check(i_slaveInputDataPool.m_masterStatus.m_masterHeartBeat);

// check if endoscope is mounted
m_endoscopeMounted := FALSE;
FOR i:=1 TO g_sArmNum DO 
	IF m_slaveArms[i].instrument.m_instruType=InstruType_endoscope THEN
		m_endoscopeMounted := TRUE;
		m_endoscopePose := transform(i_slaveInputDataPool.m_setupStatus.m_curEndPose[i], m_slaveArms[i].curCartPose);
		m_endoScopeType := m_slaveArms[i].instrument.curScopeType;
		
		//set endoscope  posture from UI data
		updateScopeUIInfo();
	END_IF
END_FOR

//update arm light
updateArmLight(i_slaveInputDataPool);

// state machine transition
stateMachine(i_slaveInputDataPool);

// controller transition
controllerTransit();

FOR i:=1 TO g_sArmNum DO
	// update dynamic data
	m_slaveArms[i].updateDyna(i_slaveInputDataPool.m_slaveDynaData);
								
	// update slave arm kinematics
	m_slaveArms[i].updateStatus();
	
	// null ptr check
	IF 0 = m_armCtrl[i] THEN
		EXIT;
	END_IF
	
	// run controller
	m_armCtrl[i].run(m_endoscopePose, i_slaveInputDataPool.m_MasterStatus,
					i_slaveInputDataPool.m_setupStatus, m_SlaveArms[i],m_armCtrlCmds[i]);

	// update commands to drivers
	m_slaveArms[i].updateCmds(m_armCtrlCmds[i]);

END_FOR

]]></ST>
      </Implementation>
    </Method>
    <Method Name="stateMachine" Id="{b9cc8560-9309-49e3-93b5-28cb02b4f5cc}">
      <Declaration><![CDATA[// state machine check and transit 
METHOD PROTECTED stateMachine : BOOL
VAR_IN_OUT CONSTANT
		i_slavesInputDataPool:ST_SlaveInputDataPool;
END_VAR
VAR
	i,j:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check instrument state
FOR i:=1 TO g_sArmNum DO
	// statues check
	IF m_slaveArms[i].panelOn = FALSE THEN
		m_panelMountedFlag[i]:=FALSE;
	END_IF
	IF m_slaveArms[i].instruOn = FALSE THEN
		m_instrumentMountedFlag[i]:=FALSE;
	END_IF
END_FOR

// get matched master arm state
FOR i:=1 TO g_sArmNum DO 
	m_matchedMasterArmState[i]:=MasterArmState_Error;
	FOR j:=1 TO g_mArmNum DO 
		IF i = i_slavesInputDataPool.m_masterStatus.m_teleSlaveArmIdx[j] THEN
			m_matchedMasterArmState[i] := i_slavesInputDataPool.m_masterStatus.m_armState[j];
		END_IF
	END_FOR
END_FOR

// check if to enable instrument invasion 
FOR i:=1 TO g_sArmNum DO
	IF SlaveArmState_Adjust = m_slaveArmState[i] OR SlaveArmState_Cart = m_slaveArmState[i] OR
	    m_slaveArms[i].instrument.instruType = InstruType_Endoscope	 THEN
		m_instruInvasionEnableFlag[i]:=FALSE;
		m_slaveArms[i].resetInstruDepth();
	ELSIF m_instrumentMountedFlag[i] AND m_slaveArms[i].instrument.instruType <> InstruType_Endoscope THEN
		m_instruInvasionEnableFlag[i]:=TRUE;
	END_IF
END_FOR  

// state machine transit
FOR i:=1 TO g_sArmNum DO
	CASE m_slaveArmState[i] OF
		// error
		SlaveArmState_Error:
			IF FALSE = i_slavesInputDataPool.m_safetyData.m_slaveErrFlag[i] THEN
				// to standby
				IF m_selfCheckPass[i] THEN
					m_nextSlaveArmState[i] :=SlaveArmState_Standby;
				// to init
				ELSE
					m_nextSlaveArmState[i] :=SlaveArmState_Init;
				END_IF
			END_IF
			
		// init
		SlaveArmState_Init:
			m_selfCheckPass[i]:=FALSE;
			// to selfcheck
			IF m_armCtrl[i].isFinished AND i_slavesInputDataPool.m_masterStatus.m_slaveSelfCheckFlag  THEN
				m_nextSlaveArmState[i]:=SlaveArmState_SelfCheck;
			// to adjust
			ELSIF m_slaveArms[i].adjustOn THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Adjust;
			END_IF

		//self check
		SlaveArmState_SelfCheck:
			// to standby
			IF m_armCtrl[i].isFinished  THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
				m_selfCheckPass[i]:=TRUE;
			END_IF
		
		//standby
		SlaveArmState_Standby:
			// to mount panel
			IF m_slaveArms[i].panelOn THEN 
				IF m_panelMountedFlag[i] THEN
					m_nextSlaveArmState[i]:=SlaveArmState_PanelReady;
				ELSE
					m_nextSlaveArmState[i]:=SlaveArmState_MountPanel;
				END_IF
			// to adjust
			ELSIF m_slaveArms[i].adjustOn THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Adjust;
			END_IF
		
		//mount panel
		SlaveArmState_MountPanel:
			// to panel ready
			IF m_armCtrl[i]. isFinished THEN
				m_nextSlaveArmState[i]:=SlaveArmState_PanelReady;
				m_panelMountedFlag[i] :=TRUE;
				
				// reset joints encoder data again
				m_slaveArms[i].initJntPos();
			// to standby
			ELSIF NOT(m_slaveArms[i].panelOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			END_IF
		
		//panel ready
		SlaveArmState_PanelReady:
			// to adjust
			IF (m_slaveArms[i].adjustOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Adjust;
			// to stand by
			ELSIF NOT(m_slaveArms[i].panelOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			ELSIF m_slaveArms[i].instruOn   THEN
				IF m_instrumentMountedFlag[i] THEN
					// to scope ready
					IF  InstruType_endoscope = m_slaveArms[i].instrument.m_instruType AND m_slaveArms[i].instruReady() THEN 
						m_nextSlaveArmState[i]:=SlaveArmState_ScopeReady;
					// to scope toggle
					ELSIF  InstruType_endoscope = m_slaveArms[i].instrument.m_instruType AND 
								(m_slaveArms[i].instrument.curScopePosture <> m_slaveArms[i].instrument.nextScopePosture OR
								m_slaveArms[i].instrument.curScopeType <> m_slaveArms[i].instrument.nextScopeType) THEN
						m_nextSlaveArmState[i] := SlaveArmState_ScopeToggle;
					// to instrument ready
					ELSIF  m_slaveArms[i].instruReady() THEN
						m_nextSlaveArmState[i]:=SlaveArmState_InstruReady;
					END_IF
				// to mount instrument/endoscope
				ELSIF m_slaveArms[i].readyForInstruMount() THEN
					m_nextSlaveArmState[i]:=SlaveArmState_MountInstru;
				END_IF
			// to instrument retract
			ELSIF  NOT(m_slaveArms[i].readyForInstruMount())  THEN
				m_nextSlaveArmState[i]:=SlaveArmState_InstruRetract;
			END_IF
			
		//mount instrument
		SlaveArmState_MountInstru:
			// to panel ready
			IF NOT(m_slaveArms[i].instruOn) OR NOT (m_slaveArms[i].trocarOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_PanelReady;
			ELSIF m_armCtrl[i].isFinished THEN
				m_instrumentMountedFlag[i] :=TRUE;
				// reset joints encoder data again
				m_slaveArms[i].initJntPos();
				
				// record current joint position as offset for instrument
				m_slaveArms[i].instrument.initInstruJntPos(m_slaveArms[i].curJntPos);
				// to instrument invasion
				IF m_instruInvasionEnableFlag[i] THEN
					m_nextSlaveArmState[i] := SlaveArmState_InstruInvasion;
				// to panel ready
				ELSE
					m_nextSlaveArmState[i]:=SlaveArmState_PanelReady;
				END_IF
				
			END_IF
		
		// instrument ready
		SlaveArmState_InstruReady:
			// to instrument retract
			IF  NOT(m_slaveArms[i].instruOn)  THEN
				m_nextSlaveArmState[i]:=SlaveArmState_InstruRetract;
				m_slaveArms[i].setInstruDepth();
			// to Adjust
			ELSIF (m_slaveArms[i].adjustOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Adjust;
			// to master-slave
			ELSIF MasterArmState_MasterSlave = m_matchedMasterArmState[i] THEN
				m_nextSlaveArmState[i] := SlaveArmState_MasterSlave;
			END_IF
		
		//master slave control
		SlaveArmState_MasterSlave:
			// to Adjust
			IF (m_slaveArms[i].adjustOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Adjust;
			// to standby
			ELSIF MasterArmState_MasterSlave <> m_matchedMasterArmState[i] THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			// to instrument retract
			ELSIF  NOT(m_slaveArms[i].panelOn) OR NOT(m_slaveArms[i].instruOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_InstruRetract;
				m_slaveArms[i].setInstruDepth();
			END_IF
		
		//endoscope ready
		SlaveArmState_ScopeReady:
			// to instrument retract
			IF NOT(m_slaveArms[i].instruOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_InstruRetract;
			// to Adjust
			ELSIF (m_slaveArms[i].adjustOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Adjust;
			// to scope toggle
			ELSIF m_slaveArms[i].instrument.curScopePosture <> m_slaveArms[i].instrument.nextScopePosture OR
					m_slaveArms[i].instrument.curScopeType <> m_slaveArms[i].instrument.nextScopeType THEN
				m_nextSlaveArmState[i] := SlaveArmState_ScopeToggle;
			// to endoscope control
			ELSIF MasterArmState_Endoscope = i_slavesInputDataPool.m_masterStatus.m_armState[1] AND 
				  MasterArmState_Endoscope = i_slavesInputDataPool.m_masterStatus.m_armState[2] THEN
				m_nextSlaveArmState[i] := SlaveArmState_EndoScope;
			END_IF
		
		//endoscope control
		SlaveArmState_EndoScope:
			// to Adjust
			IF (m_slaveArms[i].adjustOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Adjust;
			// to standby
			ELSIF MasterArmState_Endoscope <> i_slavesInputDataPool.m_masterStatus.m_armState[1]
				OR MasterArmState_Endoscope <> i_slavesInputDataPool.m_masterStatus.m_armState[2] THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			// to scope toggle
			ELSIF m_slaveArms[i].instrument.curScopePosture <> m_slaveArms[i].instrument.nextScopePosture OR
					m_slaveArms[i].instrument.curScopeType <> m_slaveArms[i].instrument.nextScopeType THEN
				m_nextSlaveArmState[i] := SlaveArmState_ScopeToggle;
			// to instrument retract
			ELSIF  NOT(m_slaveArms[i].panelOn) OR NOT(m_slaveArms[i].instruOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_InstruRetract;
			END_IF
			
		//arm adjust
		SlaveArmState_Adjust:
			IF NOT(m_slaveArms[i].adjustOn) THEN
				// to init
				IF NOT (m_selfCheckPass[i]) THEN
					m_nextSlaveArmState[i] :=SlaveArmState_Init;
				// to standby
				ELSE
					m_nextSlaveArmState[i] :=SlaveArmState_Standby;
				END_IF
			END_IF
		
		//scope toggle
		SlaveArmState_ScopeToggle:
			// to instrument retract
			IF NOT(m_slaveArms[i].instruOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_InstruRetract;
			// to standby
			ELSIF m_armCtrl[i].isFinished THEN
				m_nextSlaveArmState[i] :=SlaveArmState_Standby;
			END_IF
		
		// package
		SlaveArmState_Package:
			// to Adjust
			IF (m_slaveArms[i].adjustOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Adjust;
			// to standby
			ELSIF m_armCtrl[i].isFinished THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			END_IF
			
		// Cart
		SlaveArmState_Cart:
			IF NOT(i_slavesInputDataPool.m_cartStatus.m_inMotion) THEN
				// to standby
				IF m_selfCheckPass[i] THEN
					m_nextSlaveArmState[i] :=SlaveArmState_Standby;
				// to init
				ELSE
					m_nextSlaveArmState[i] :=SlaveArmState_Init;
				END_IF
			END_IF
		
		// Gravity Calibration
		SlaveArmState_GravityCali:
			// to Adjust
			IF (m_slaveArms[i].adjustOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Adjust;
			// to standby
			ELSIF m_armCtrl[i].isFinished THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			END_IF
			
		//arm test
		SlaveArmState_Test:
			// to standby
			IF  m_armCtrl[i].isFinished THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			END_IF
		
		// instrument retract
		SlaveArmState_InstruRetract:
			// to Adjust
			IF (m_slaveArms[i].adjustOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Adjust;
			// to standby
			ELSIF m_armCtrl[i].isFinished THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Standby;
			END_IF
		
		// instrument invasion
		SlaveArmState_InstruInvasion:
			// to instrument retract
			IF NOT m_slaveArms[i].instruOn THEN
				m_nextSlaveArmState[i]:=SlaveArmState_InstruRetract;
				m_slaveArms[i].setInstruDepth();
			// to Adjust
			elsIF (m_slaveArms[i].adjustOn) THEN
				m_nextSlaveArmState[i]:=SlaveArmState_Adjust;
			// to instrument ready
			ELSIF m_armCtrl[i].isFinished THEN
			// to panel ready
				m_nextSlaveArmState[i]:=SlaveArmState_PanelReady;
			END_IF
		
		// arm disable
		SlaveArmState_Disable:
			IF NOT(i_slavesInputDataPool.m_UIData.m_slaveArmDisableFlag[i]) THEN
				// to standby
				IF m_selfCheckPass[i] THEN
					m_nextSlaveArmState[i] :=SlaveArmState_Standby;
				// to init
				ELSE
					m_nextSlaveArmState[i] :=SlaveArmState_Init;
				END_IF
			END_IF
	END_CASE
	
	// control is forbidden if setup arm is not in Hold
	IF SetupArmState_Hold <> i_slavesInputDataPool.m_setupStatus.m_armState[i] AND
		(SlaveArmState_InstruReady = m_nextSlaveArmState[i] OR SlaveArmState_MasterSlave = m_nextSlaveArmState[i]
		 OR SlaveArmState_ScopeReady = m_nextSlaveArmState[i] OR SlaveArmState_EndoScope = m_nextSlaveArmState[i]) THEN
		m_nextSlaveArmState[i]:=SlaveArmState_Standby;
	END_IF
	
	// to cart
	IF i_slavesInputDataPool.m_cartStatus.m_inMotion AND m_nextSlaveArmState[i] > SlaveArmState_Init THEN
		m_nextSlaveArmState[i] := SlaveArmState_Cart;
	END_IF
	
	// arm disable
	IF i_slavesInputDataPool.m_UIData.m_slaveArmDisableFlag[i] THEN
		m_nextSlaveArmState[i] := SlaveArmState_Disable;
	// error check
	ELSIF i_slavesInputDataPool.m_safetyData.m_slaveErrFlag[i] THEN
		m_nextSlaveArmState[i]:=SlaveArmState_Error;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateArmLight" Id="{0d4d98a3-ae97-4bc5-8d05-6e3f5cc1e792}">
      <Declaration><![CDATA[METHOD updateArmLight : BOOL
VAR_INPUT
	i_slaveInputDataPool:ST_SlaveInputDataPool;
END_VAR

VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//*******************机械臂与动力盒上的灯光写入********************
//不可恢复性故障-----红色常亮
//可恢复故障----琥珀色-先闪烁5s、再进行常亮
//正处于器械控制或者端口控制状态-----蓝色闪烁
//该手术臂正在执行一项需要用户短时间等待的活动、例如器械卡接----蓝色-脉动闪烁
//工具更换引导正在进行中-----绿色闪烁
//未通电、已禁用、已收起----------关
//系统正常运行-----蓝色常亮
//灯光颜色--0-灯灭、1蓝灯常亮、2蓝灯闪烁、3琥珀色闪烁、4红灯闪烁、5绿灯常亮、6绿灯闪烁、7红灯常亮、8琥珀色常亮、9蓝灯脉动式闪烁

FOR i := 1 TO g_sArmNum BY 1 DO
	IF m_slaveArmState[i] = SlaveArmState_Error OR i_slaveInputDataPool.m_setupStatus.m_armState[i] = SlaveArmState_Error THEN
		m_lightCrlWord[i] := ArmLight_AmberBlink;
	ELSIF m_slaveArmState[i] = SlaveArmState_MountPanel OR m_slaveArmState[i] = SlaveArmState_MountInstru THEN
		m_lightCrlWord[i] := ArmLight_BluePulse;
	ELSIF m_slaveArmState[i] = SlaveArmState_InstruRetract OR m_slaveArmState[i] = SlaveArmState_Adjust OR i_slaveInputDataPool.m_setupStatus.m_armState[i] = SetupArmState_ManualAdjust THEN
		m_lightCrlWord[i] := ArmLight_BlueBlink;
	ELSIF m_slaveArmState[i] = SlaveArmState_InstruInvasion THEN
		m_lightCrlWord[i] := ArmLight_GreenBlink;
	ELSIF m_slaveArmState[i] = SlaveArmState_Disable THEN
		m_lightCrlWord[i] := ArmLight_Off;
	ELSE
		m_lightCrlWord[i] := ArmLight_BlueOn;
	END_IF

	m_slaveArms[i].checkLight(m_lightCrlWord[i]);
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateScopeUIInfo" Id="{8acce6ed-98d8-433e-be8e-5c90fe998877}">
      <Declaration><![CDATA[METHOD PROTECTED updateScopeUIInfo : BOOL
VAR_INPUT
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check if endoscope is mounted
FOR i:=1 TO g_sArmNum DO 
	IF m_slaveArms[i].instrument.m_instruType=InstruType_endoscope THEN
		
		// update command endoscope posture from UI
		IF GVL_com_upper_PC.scope_up_down <> m_lastEndoScopePostureUI THEN
			IF GVL_com_upper_PC.scope_up_down = 1 THEN
				m_slaveArms[i].instrument.nextScopePosture := EndoScopePosture_HeadDown;
			ELSIF  GVL_com_upper_PC.scope_up_down = 2 THEN
				m_slaveArms[i].instrument.nextScopePosture := EndoscopePosture_HeadUp;
			END_IF
		END_IF
		
		// update current endoscope posture to UI
		IF m_slaveArms[i].instrument.curScopePosture <> m_lastEndoScopePostureRobot THEN
			IF m_slaveArms[i].instrument.curScopePosture = EndoScopePosture_HeadDown THEN
				GVL_com_upper_PC.scope_up_down := 1 ;
			ELSIF  m_slaveArms[i].instrument.curScopePosture = EndoScopePosture_HeadUp THEN
				GVL_com_upper_PC.scope_up_down := 2;
			END_IF
		END_IF
		m_lastEndoScopePostureRobot := m_slaveArms[i].instrument.curScopePosture;
		
	END_IF
END_FOR

m_lastEndoScopePostureUI := GVL_com_upper_PC.scope_up_down;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveRobot">
      <LineId Id="60" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.controllerTransit">
      <LineId Id="21" Count="0" />
      <LineId Id="6" Count="12" />
      <LineId Id="5" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.getStatus">
      <LineId Id="23" Count="0" />
      <LineId Id="129" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="57" Count="5" />
      <LineId Id="56" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.Init">
      <LineId Id="5" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="47" Count="3" />
      <LineId Id="154" Count="0" />
      <LineId Id="80" Count="2" />
      <LineId Id="87" Count="5" />
      <LineId Id="94" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="62" Count="8" />
      <LineId Id="73" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="124" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="139" Count="1" />
      <LineId Id="147" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="61" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.run">
      <LineId Id="78" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="162" Count="1" />
      <LineId Id="161" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="130" Count="2" />
      <LineId Id="180" Count="1" />
      <LineId Id="171" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="128" Count="1" />
      <LineId Id="189" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="88" Count="1" />
      <LineId Id="97" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="73" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.stateMachine">
      <LineId Id="347" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="338" Count="6" />
      <LineId Id="337" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="368" Count="1" />
      <LineId Id="377" Count="0" />
      <LineId Id="380" Count="1" />
      <LineId Id="378" Count="1" />
      <LineId Id="733" Count="4" />
      <LineId Id="742" Count="0" />
      <LineId Id="738" Count="0" />
      <LineId Id="750" Count="0" />
      <LineId Id="739" Count="2" />
      <LineId Id="370" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="322" Count="2" />
      <LineId Id="350" Count="0" />
      <LineId Id="631" Count="0" />
      <LineId Id="627" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="632" Count="0" />
      <LineId Id="628" Count="0" />
      <LineId Id="630" Count="0" />
      <LineId Id="629" Count="0" />
      <LineId Id="352" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="634" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="636" Count="2" />
      <LineId Id="635" Count="0" />
      <LineId Id="41" Count="2" />
      <LineId Id="354" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="633" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="193" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="194" Count="2" />
      <LineId Id="171" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="147" Count="1" />
      <LineId Id="356" Count="0" />
      <LineId Id="151" Count="1" />
      <LineId Id="224" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="204" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="603" Count="1" />
      <LineId Id="602" Count="0" />
      <LineId Id="240" Count="3" />
      <LineId Id="299" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="591" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="710" Count="1" />
      <LineId Id="720" Count="0" />
      <LineId Id="712" Count="0" />
      <LineId Id="709" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="589" Count="1" />
      <LineId Id="592" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="722" Count="2" />
      <LineId Id="251" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="252" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="295" Count="1" />
      <LineId Id="294" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="543" Count="2" />
      <LineId Id="495" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="490" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="259" Count="4" />
      <LineId Id="360" Count="0" />
      <LineId Id="264" Count="1" />
      <LineId Id="555" Count="0" />
      <LineId Id="266" Count="2" />
      <LineId Id="361" Count="1" />
      <LineId Id="365" Count="0" />
      <LineId Id="269" Count="3" />
      <LineId Id="428" Count="1" />
      <LineId Id="427" Count="0" />
      <LineId Id="273" Count="2" />
      <LineId Id="505" Count="0" />
      <LineId Id="503" Count="1" />
      <LineId Id="556" Count="0" />
      <LineId Id="276" Count="1" />
      <LineId Id="402" Count="1" />
      <LineId Id="406" Count="2" />
      <LineId Id="557" Count="0" />
      <LineId Id="409" Count="1" />
      <LineId Id="412" Count="1" />
      <LineId Id="416" Count="0" />
      <LineId Id="683" Count="3" />
      <LineId Id="414" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="415" Count="0" />
      <LineId Id="418" Count="1" />
      <LineId Id="431" Count="1" />
      <LineId Id="430" Count="0" />
      <LineId Id="420" Count="1" />
      <LineId Id="425" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="553" Count="1" />
      <LineId Id="552" Count="0" />
      <LineId Id="688" Count="2" />
      <LineId Id="687" Count="0" />
      <LineId Id="558" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="279" Count="3" />
      <LineId Id="306" Count="0" />
      <LineId Id="639" Count="1" />
      <LineId Id="672" Count="0" />
      <LineId Id="675" Count="0" />
      <LineId Id="673" Count="1" />
      <LineId Id="451" Count="1" />
      <LineId Id="691" Count="2" />
      <LineId Id="699" Count="2" />
      <LineId Id="697" Count="0" />
      <LineId Id="694" Count="2" />
      <LineId Id="455" Count="1" />
      <LineId Id="454" Count="0" />
      <LineId Id="457" Count="1" />
      <LineId Id="460" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="461" Count="0" />
      <LineId Id="433" Count="4" />
      <LineId Id="439" Count="0" />
      <LineId Id="645" Count="5" />
      <LineId Id="462" Count="1" />
      <LineId Id="465" Count="5" />
      <LineId Id="464" Count="0" />
      <LineId Id="471" Count="0" />
      <LineId Id="308" Count="4" />
      <LineId Id="307" Count="0" />
      <LineId Id="506" Count="2" />
      <LineId Id="513" Count="5" />
      <LineId Id="509" Count="0" />
      <LineId Id="519" Count="2" />
      <LineId Id="576" Count="2" />
      <LineId Id="575" Count="0" />
      <LineId Id="523" Count="4" />
      <LineId Id="546" Count="2" />
      <LineId Id="664" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="472" Count="1" />
      <LineId Id="615" Count="2" />
      <LineId Id="651" Count="5" />
      <LineId Id="618" Count="1" />
      <LineId Id="586" Count="1" />
      <LineId Id="478" Count="0" />
      <LineId Id="475" Count="1" />
      <LineId Id="448" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="442" Count="1" />
      <LineId Id="441" Count="0" />
      <LineId Id="326" Count="2" />
      <LineId Id="612" Count="2" />
      <LineId Id="329" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="286" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.updateArmLight">
      <LineId Id="8" Count="7" />
      <LineId Id="6" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="9" />
      <LineId Id="69" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveRobot.updateScopeUIInfo">
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="39" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>