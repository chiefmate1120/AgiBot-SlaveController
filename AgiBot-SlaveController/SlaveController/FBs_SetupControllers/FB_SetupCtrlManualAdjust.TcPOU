<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SetupCtrlManualAdjust" Id="{a66618bf-53b6-41ea-9ead-5a7cf0054c7f}" SpecialFunc="None">
    <Declaration><![CDATA[// Brief: Setup Arm Adjust
FUNCTION_BLOCK PUBLIC FB_SetupCtrlManualAdjust EXTENDS FB_SetupArmCtrlBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// friction compensation scale
	m_frictionScale :LREAL :=0.5;
	
	// velocity threshold for friction compensation 
	m_jnt3FrictionCompVelLow :LREAL := 0.0005;
	m_frictionScaleLow :LREAL :=0.3;
	m_jnt3FrictionCompVelMiddle :LREAL := 0.005;
	m_frictionScaleMiddle :LREAL :=0.5;
	m_jnt3FrictionCompVelHigh :LREAL := 0.05;
	m_frictionScaleHigh :LREAL :=0.7;
	
	// jnt5 adjust velocity
	m_jnt5MaxAdjustVel :LREAL:=5.0*g_deg2Rad;
	m_jnt5MaxAdjustAcc :LREAL:=60*g_deg2Rad;
	
	// jnt5 enabled time period
	m_jnt5EnableTime :LREAL :=0;
	
	// time threshold to drive jnt5 after it's enabled
	m_jnt5AdjustWaitTime :LREAL := 0.25;

	// distance buffer from joint limit to start damp
	m_limitBufferForDamp :LREAL :=0.05;
	
	// max damp
	m_maxDamp :LREAL := 3000;
	
	m_limitBufferForCtrl : LREAL := 0.01;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="calcCmdJntPos" Id="{a3473076-af2e-4c76-847c-85354c287698}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntPos : BOOL
VAR_IN_OUT CONSTANT
	i_setupArm	:FB_SetupArm;
END_VAR


VAR 
	i :INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// enable/disenable joint5
IF i_setupArm.jnt5AdjustDir = 0 THEN
	m_jntEnableFlag[5] := 0;
	m_cmdJntPos[5]:=i_setupArm.curJntPos[5];
	m_jnt5EnableTime:=0;
	m_cmdJntVel[5]:=0;
	RETURN;
ELSE
	// disable joints if this joint is an unrecoverable failure
	m_jntEnableFlag[5] :=  BOOL_TO_INT( NOT (SafetyCheck.m_SafetyCheck.m_jntErrFlag[i_setupArm.armIdx, 0, 3] OR  SafetyCheck.m_SafetyCheck.m_jntErrFlag[i_setupArm.armIdx, 5, 3]));
	m_jnt5EnableTime := m_jnt5EnableTime + g_setupArmCtrlCycleTime;
END_IF

// update command position
IF m_jnt5EnableTime>m_jnt5AdjustWaitTime THEN
	m_cmdJntVel[5]:=m_cmdJntVel[5] + i_setupArm.jnt5AdjustDir * m_jnt5MaxAdjustAcc * g_setupArmCtrlCycleTime;
	m_cmdJntVel[5]:=LIMIT(-m_jnt5MaxAdjustVel, m_cmdJntVel[5], m_jnt5MaxAdjustVel);
	
	// joint limit
	IF (m_cmdJntPos[5] > GVL_SetupMotorParameters.g_maxJntPos[i_setupArm.armIdx, 5] - g_setupJntPosLimitBuffer[5] AND m_cmdJntVel[5]>0) OR 
		(m_cmdJntPos[5] < GVL_SetupMotorParameters.g_minJntPos[i_setupArm.armIdx, 5] + g_setupJntPosLimitBuffer[5] AND m_cmdJntVel[5]<0)  THEN
		m_cmdJntVel[5] := 0;
	END_IF
	
	m_cmdJntPos[5]:= m_cmdJntPos[5] + m_cmdJntVel[5] * g_setupArmCtrlCycleTime;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="calcCmdJntTrq" Id="{c618bd90-4444-4b54-b7cd-0646bf55f729}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntTrq : BOOL
VAR_IN_OUT CONSTANT
	i_setupArm	:FB_SetupArm;
END_VAR
VAR
	i:INT;
	vel :LREAL;
	scale:LREAL;
	ratio:LREAL;
	dampScale :LREAL;
	limitDis:LREAL;
	dampOffset : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// set joint torque to zero in default
m_cmdJntTrq := g_zeroVec5d;

//enable/diable  joint1-4
IF NOT(i_setupArm.manualAdjustOn) THEN
	FOR i:=1 TO 4 DO
		m_jntEnableFlag[i] := 0;
		m_jntOPMode[i]:=DriverOPMode_Pos;
	END_FOR
	
	// TODO: setup joint3 would "jump" a bit when transit from torque mode to position mode
	m_jntOPMode[3] := DriverOPMode_Trq;
	RETURN;
ELSE
	FOR i:=1 TO 4 DO
		// disable joints if this joint is an unrecoverable failure
		m_jntEnableFlag[i] := BOOL_TO_INT( NOT (SafetyCheck.m_SafetyCheck.m_jntErrFlag[i_setupArm.armIdx, 0, 3] OR  SafetyCheck.m_SafetyCheck.m_jntErrFlag[i_setupArm.armIdx, i, 3]));
		m_jntOPMode[i]:=DriverOPMode_Trq;
		m_cmdJntPos[i] := i_setupArm.curJntPos[i];
	END_FOR
END_IF

// friction scale
vel:=ABS(i_setupArm.curJntVel[3]);
IF vel < m_jnt3FrictionCompVelLow THEN
	m_frictionScale := m_frictionScaleLow * vel/m_jnt3FrictionCompVelLow ;
ELSIF  vel > m_jnt3FrictionCompVelLow AND vel  < m_jnt3FrictionCompVelMiddle THEN
	ratio:= (vel-m_jnt3FrictionCompVelLow)/(m_jnt3FrictionCompVelMiddle-m_jnt3FrictionCompVelLow);
	m_frictionScale :=m_frictionScaleLow+ratio * (m_frictionScaleMiddle-m_frictionScaleLow);
ELSIF  vel > m_jnt3FrictionCompVelMiddle AND vel  < m_jnt3FrictionCompVelHigh THEN
	ratio:= (vel-m_jnt3FrictionCompVelMiddle)/(m_jnt3FrictionCompVelHigh-m_jnt3FrictionCompVelMiddle);
	m_frictionScale :=m_frictionScaleMiddle+ratio * (m_frictionScaleHigh-m_frictionScaleMiddle);
ELSIF  vel > m_jnt3FrictionCompVelHigh THEN
	m_frictionScale := m_frictionScaleHigh;
END_IF

// add damp near joint limit 
IF (i_setupArm.curJntPos[3] > GVL_SetupMotorParameters.g_maxJntPos[1,3] - m_limitBufferForCtrl ) 
	OR (i_setupArm.curJntPos[3] < GVL_SetupMotorParameters.g_minJntPos[1,3] + m_limitBufferForCtrl) OR CartControl.m_cartRobot.m_slaveCart.m_columnAdjustEnable  THEN
	dampOffset:= 0;
ELSIF (i_setupArm.curJntPos[3] > GVL_SetupMotorParameters.g_maxJntPos[1,3] - m_limitBufferForDamp AND  i_setupArm.curJntVel[3]> 0 ) 
	OR (i_setupArm.curJntPos[3] < GVL_SetupMotorParameters.g_minJntPos[1,3] + m_limitBufferForDamp AND  i_setupArm.curJntVel[3]<0 )  THEN
	limitDis := MIN(GVL_SetupMotorParameters.g_maxJntPos[1,3] - i_setupArm.curJntPos[3], i_setupArm.curJntPos[3]-GVL_SetupMotorParameters.g_minJntPos[1,3]);
	dampScale  :=LIMIT(0, 1-limitDis/(m_limitBufferForDamp-m_limitBufferForCtrl),1);
	dampOffset:= -dampScale * m_maxDamp * i_setupArm.curJntVel[3];
END_IF


// add friction compensation
m_frictionScale := LIMIT(0, m_frictionScale, 1);
m_cmdJntTrq[3]:= m_frictionScale * sign(i_setupArm.curJntVel[3])*jnt3Friction(i_setupArm.armIdx, i_setupArm.curJntPos[3]) + dampOffset;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{f9e2fdef-c3dd-4598-8bef-00a8d9aa9850}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_IN_OUT CONSTANT
	i_setupArm	:FB_SetupArm;
END_VAR
VAR_IN_OUT 
	r_setupArmCtrlCmd :ST_SetupArmCtrlCmds;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Init(i_setupArm,r_setupArmCtrlCmd);
m_jnt5EnableTime :=0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="jnt3Friction" Id="{e5cc270a-8755-465e-9228-86a9a255b090}">
      <Declaration><![CDATA[METHOD PROTECTED jnt3Friction : Lreal
VAR_INPUT
	i_armIdx:INT;
	i_jnt3Pos :LREAL;
END_VAR

VAR
	q:LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[q := LIMIT(GVL_SetupArmDynamics.g_setupJnt3GravityPosRange[i_armIdx,1], i_jnt3Pos, GVL_SetupArmDynamics.g_setupJnt3GravityPosRange[i_armIdx,2]);
jnt3Friction:=GVL_SetupArmDynamics.g_setupJnt3FrictionParams[i_armIdx,1]*EXPT(q,3)+GVL_SetupArmDynamics.g_setupJnt3FrictionParams[i_armIdx,2]*EXPT(q,2)+
				GVL_SetupArmDynamics.g_setupJnt3FrictionParams[i_armIdx,3]*q+GVL_SetupArmDynamics.g_setupJnt3FrictionParams[i_armIdx,4];]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SetupCtrlManualAdjust">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupCtrlManualAdjust.calcCmdJntPos">
      <LineId Id="171" Count="25" />
      <LineId Id="115" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupCtrlManualAdjust.calcCmdJntTrq">
      <LineId Id="146" Count="8" />
      <LineId Id="192" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="155" Count="22" />
      <LineId Id="206" Count="1" />
      <LineId Id="209" Count="8" />
      <LineId Id="205" Count="0" />
      <LineId Id="178" Count="3" />
      <LineId Id="123" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupCtrlManualAdjust.init">
      <LineId Id="57" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupCtrlManualAdjust.jnt3Friction">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>