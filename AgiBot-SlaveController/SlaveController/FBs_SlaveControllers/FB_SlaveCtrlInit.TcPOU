<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_SlaveCtrlInit" Id="{2f1b91d8-ebd5-4b63-92d8-450fe3a94973}" SpecialFunc="None">
    <Declaration><![CDATA[// Brief: Slave Arm Init
FUNCTION_BLOCK PUBLIC FB_SlaveCtrlInit EXTENDS FB_SlaveArmCtrlBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	m_initState :INT :=0;
	
	// SDO writer
	m_MotorCurrentSDOWrite: ARRAY[1..5] OF FB_EcCoESdoWrite;
	// power box joint motor rated current
	m_wristJntRatedCurrent : DINT := 200;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
]]></ST>
    </Implementation>
    <Method Name="calcCmdJntPos" Id="{50167c08-0683-4e04-ab32-64d931dad4e1}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntPos : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	jntIdx:INT;
	SDOSubIndexCur :WORD;
	armIdx:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF m_timePeriod > 1.0 THEN
	m_isFinished := TRUE;
END_IF

// reset instrument control box motor current limit
armIdx :=i_slaveArm.armIdx;
FOR jntIdx :=4 TO 8 DO
	//动力盒移动关节和器械旋转关节，共享一个控制字，由SDO写入
	IF (jntIdx=8)  THEN
		SDOSubIndexCur:=16#6098;
	//动力盒3、5号电机为一个驱动器，共享一个控制字，由SDO写入
	ELSIF (jntIdx=4) OR (jntIdx=6)  THEN
		SDOSubIndexCur:=16#6099;
	//动力盒2、4号电机为一个驱动器，共享一个控制字，由SDO写入
	ELSIF (jntIdx=5) OR (jntIdx=7)  THEN
		SDOSubIndexCur:=16#609A;
	END_IF

	// write max motor current if it changes and works in position mode  GVL_SlaveMotorParameters.g_motorMaxCurrent[jntIdx]
	m_MotorCurrentSDOWrite[jntIdx-3](sNetID:= GVL_SlaveJointEncoderCaliData.g_slaveArmNetID[armIdx],
					nSlaveAddr := GVL_SlaveJointEncoderCaliData.g_slaveJointNetPort[armIdx,jntIdx],
					nSubIndex:=0,nIndex:=SDOSubIndexCur,pSrcBuf:=ADR(m_wristJntRatedCurrent),
					cbBufLen:=SIZEOF(m_wristJntRatedCurrent),bExecute:=TRUE);
	IF NOT m_MotorCurrentSDOWrite[jntIdx-3].bBusy THEN
		m_MotorCurrentSDOWrite[jntIdx-3](bExecute:=FALSE);
	END_IF
	
END_FOR


]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{0eca198b-2030-4cc0-a250-a6bdc9d0e230}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm	:FB_SlaveArm;
END_VAR
VAR_IN_OUT 
	r_slaveArmCtrlCmd :ST_SlaveArmCtrlCmds;
END_VAR

VAR
	i:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Init(i_slaveArm,r_slaveArmCtrlCmd);
m_jntEnableFlag:=g_zeroVec8i;

// update commands to arm
copyCmds(r_slaveArmCtrlCmd);
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveCtrlInit">
      <LineId Id="18" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInit.calcCmdJntPos">
      <LineId Id="278" Count="29" />
      <LineId Id="177" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlInit.init">
      <LineId Id="11" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>