<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_SlaveCtrlMountInstru" Id="{db93de24-03af-45f5-8edb-e02a943fe1f8}" SpecialFunc="None">
    <Declaration><![CDATA[// Brief: Mounting Instrument
FUNCTION_BLOCK PUBLIC FB_SlaveCtrlMountInstru EXTENDS FB_SlaveArmCtrlBase
VAR
	// mount status
	m_instruMountStatus :INT := 0;
	m_scopeMountStatus :INT := 0;
	m_ultrasoundMountStatus :INT :=0 ;
	
	// flag if joint is mounted
	m_jointMounted :ARRAY[1..5] OF BOOL := [5(FALSE)];
	
	// instrument mount motion range
	m_mountMotionAng :Vec5d :=[5(pi)];
	
	// instrument mount direction
	m_mountDir :Vec5i :=[1, 1, 1, 1, 1];
	
	// mount motion planning
	m_jntOTG :ARRAY[1..5] OF FB_secOrdTrajFilter;
	m_instruMountVel :LREAL := 4*PI;
	m_instruMountAcc :LREAL := 8*PI;
	
	//Joint 4 half-range angle of instrument
	m_instruJnt4HalfRangeAng :LREAL := 323*g_deg2Rad;
	
	// joint current threshold which indicate panel is buckled with instrument
	m_maxJntCurrent :Vec5d := [150, 150, 150, 180, 180];
	
	// command mount motion
	m_targetMountPos :Vec8d;
	
	// instrument zero position
	m_instruZeroDeviation :Vec5d;
	
	//ultrasound knife Reduce the current rotation Angle  J3
	m_ultraKnifeRotaAngleJ3 :LREAL := 3*g_deg2Rad;
	
	// joint position error
	m_jntPosErr :Vec5d;
	
	// endoscope motion angle to original position
	m_scopeJnt4CenterMotionAng :LREAL :=175*g_deg2Rad;
	m_scopeJnt5CenterMotionAng :LREAL :=150*g_deg2Rad;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="calcCmdJntPos" Id="{106b8ce6-26fa-4bca-bfc9-20f8cdf00f0e}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntPos : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// return directly if instrument/endoscope is not readed
IF i_slaveArm.instrument.onChipData.m_Error THEN
	return;
END_IF

IF i_slaveArm.instrument.onChipData.m_InstruReadSucceed AND InstruType_endoscope = i_slaveArm.instrument.m_instruType THEN
	mountEndoscope(i_slaveArm);
ELSIF i_slaveArm.instrument.onChipData.m_InstruReadSucceed AND (InstruType_UltrasoundKnifeS = i_slaveArm.instrument.m_instruType OR InstruType_UltrasoundKnifeU = i_slaveArm.instrument.m_instruType) THEN
	mountUltraKnife(i_slaveArm);
ELSE
	mountInstrument(i_slaveArm);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{85ccbdcb-d27d-4162-a6ec-e8e93d30dbc6}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm	:FB_SlaveArm;
END_VAR
VAR_IN_OUT 
	r_slaveArmCtrlCmd :ST_SlaveArmCtrlCmds;
END_VAR

VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check if to hold the command joint position unchanged
m_holdLastCmds := checkToHoldLastCmds(i_slaveArm);

SUPER^.Init(i_slaveArm,r_slaveArmCtrlCmd);
m_jntOPMode[4] := DriverOPMode_PosTrq;
m_jntOPMode[5] := DriverOPMode_PosTrq;
m_jntOPMode[6] := DriverOPMode_PosTrq;
m_jntOPMode[7] := DriverOPMode_PosTrq;
m_jntOPMode[8] := DriverOPMode_PosTrq;

FOR i:=1 TO 5 DO
	m_targetMountPos[i+3]:=m_cmdJntPos[i+3];
	m_jntOTG[i].init(m_targetMountPos[i+3], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
	m_jointMounted[i]:=FALSE;
END_FOR

m_instruMountStatus:=0;
m_scopeMountStatus:=0;
m_ultrasoundMountStatus:=0;

// update commands to arm
copyCmds(r_slaveArmCtrlCmd);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="mountEndoscope" Id="{924322f0-f77b-4627-9090-85580b93061c}">
      <Declaration><![CDATA[METHOD mountEndoscope : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i :INT;
	curJntPos :Vec8d;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[curJntPos := i_slaveArm.curJntPos;

CASE m_scopeMountStatus OF
	//fix scope lock joint(joint 7)
	0:
		// other joints stay still
		FOR i:=1 TO 3 DO
			m_jointMounted[i] := TRUE;
			m_targetMountPos[i+3]:=curJntPos[i+3];
			m_jntOTG[i].init(m_targetMountPos[i+3], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
		END_FOR
	
		// check if buckled
		m_jointMounted[4]:=FALSE; 
		m_jointMounted[5]:=FALSE; 
		IF ABS(i_slaveArm.filtJntCurrent[7])> m_maxJntCurrent[4] THEN 
			m_jointMounted[4]:=TRUE;
			m_targetMountPos[7]:=curJntPos[7];
			m_jntOTG[4].init(m_targetMountPos[7], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			m_scopeMountStatus:=1;
		ELSE
			m_targetMountPos[7]:=curJntPos[7]+m_mountMotionAng[4];
		END_IF

	1: // buckle scope rotate joint (joint 8)
		m_jointMounted[5]:=FALSE; 
		IF ABS(i_slaveArm.filtJntCurrent[8])> m_maxJntCurrent[5] THEN 
			m_jointMounted[5]:=TRUE;
			m_targetMountPos[8]:=curJntPos[8];
			m_jntOTG[5].init(m_targetMountPos[8], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			m_scopeMountStatus:=2;
		ELSE
			m_targetMountPos[8]:=curJntPos[8]+m_mountMotionAng[5];
		END_IF
	

	2:// move back to zero position
		m_targetMountPos[7]:= curJntPos[7]-m_scopeJnt4CenterMotionAng;
		m_targetMountPos[8]:= curJntPos[8]-m_scopeJnt5CenterMotionAng;
		m_scopeMountStatus :=3;
		
		
	3:
		IF ABS(m_targetMountPos[7]-curJntPos[7]) <GVL_SlaveControlParameters.g_jntCtrlAngTolHigh AND 
				ABS(m_targetMountPos[8]-curJntPos[8]) <GVL_SlaveControlParameters.g_jntCtrlAngTolHigh THEN
			m_isFinished := TRUE;
		END_IF
		
END_CASE

// traj plan
FOR i:=1 TO 5 DO
	m_jntOTG[i].run(m_targetMountPos[i+3],0.0, o_cmdAcc=>m_cmdJntAcc[3+i],o_cmdVel=>m_cmdJntVel[3+i],o_cmdPos=>m_cmdJntPos[i+3]);
END_FOR


]]></ST>
      </Implementation>
    </Method>
    <Method Name="mountInstrument" Id="{cbdcc411-d3ae-4c70-8c1a-fbdc24e77583}">
      <Declaration><![CDATA[METHOD mountInstrument : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i :INT;
	curJntPos :Vec8d;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[curJntPos := i_slaveArm.curJntPos;

// joint4 stay still if instrument has only on finger
IF i_slaveArm.instrument.m_isSingleFinger THEN
	m_jointMounted[1]:=TRUE;
END_IF

CASE m_instruMountStatus OF
	// To lock panel with instrument
	0:
		//buckle panel with instrument
		FOR i:=1 TO 4 DO
			// check if buckled 
			IF ABS(i_slaveArm.filtJntCurrent[i+3])> m_maxJntCurrent[i] THEN 
				m_jointMounted[i]:=TRUE;
				m_targetMountPos[i+3]:=curJntPos[i+3];
				m_jntOTG[i].init(m_targetMountPos[i+3], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			END_IF
			
			// set target joint position
			IF FALSE = m_jointMounted[i] THEN
				IF i = 4 OR i < 3 THEN
					m_targetMountPos[i+3]:=curJntPos[i+3]+m_mountMotionAng[i];
				ELSE
					m_targetMountPos[i+3]:=curJntPos[i+3]-m_mountMotionAng[i];
				END_IF
				
			END_IF
		END_FOR
		
		
		// check transition condition
		IF (m_jointMounted[1] AND m_jointMounted[2] AND m_jointMounted[3] AND m_jointMounted[4])  THEN
			IF i_slaveArm.instrument.onChipData.m_InstruReadSucceed THEN//Check whether the data is read successfully
				m_instruMountStatus:=1;
			END_IF
		END_IF
	
	1:// calculation deviates from the instrument zero position
		FOR i:=1 TO 4 DO
			m_instruZeroDeviation[i] :=  i_slaveArm.linkSingle[i+3] - i_slaveArm.instrument.onChipData.m_InstruPos[i];
		END_FOR
		m_instruMountStatus :=2;
	
	
	2:// move back to zero position
		FOR i:=1 TO 3 DO//J1-3
			IF m_instruZeroDeviation[i]>pi THEN
				m_instruZeroDeviation[i] := m_instruZeroDeviation[i] - 2*PI;
			ELSIF m_instruZeroDeviation[i]<-pi THEN
				m_instruZeroDeviation[i] := m_instruZeroDeviation[i] + 2*PI;
			END_IF
		END_FOR
		
		//joint4
		IF m_instruZeroDeviation[4]>0 AND m_instruZeroDeviation[4] < pi THEN
			m_instruZeroDeviation[4] := m_instruZeroDeviation[4] - 2*pi;
		ELSIF m_instruZeroDeviation[4]<0 AND m_instruZeroDeviation[4] > -pi THEN
			m_instruZeroDeviation[4] := m_instruZeroDeviation[4] + 2*pi;
		END_IF
		
		// set target joint position
		FOR i:=1 TO 4 DO
			m_targetMountPos[i+3]:=curJntPos[i+3] - m_instruZeroDeviation[i];
		END_FOR
		m_instruMountStatus :=3;
		
		
	3:
		m_isFinished:=TRUE;
		FOR i:=1 TO 4 DO 
			m_jntPosErr[i]:=m_targetMountPos[i+3]-curJntPos[i+3];
			IF ABS(m_jntPosErr[i]) >GVL_SlaveControlParameters.g_jntCtrlAngTolHigh OR 
					ABS( i_slaveArm.linkSingle[i+3] - i_slaveArm.instrument.onChipData.m_InstruPos[i]) >5*g_deg2rad THEN
				m_isFinished := FALSE;
				EXIT;
			END_IF
		END_FOR
		
END_CASE

// traj plan
FOR i:=1 TO 4 DO
	m_jntOTG[i].run(m_targetMountPos[i+3],0.0, o_cmdAcc=>m_cmdJntAcc[3+i],o_cmdVel=>m_cmdJntVel[3+i],o_cmdPos=>m_cmdJntPos[i+3]);
END_FOR


]]></ST>
      </Implementation>
    </Method>
    <Method Name="mountUltraKnife" Id="{6b01324c-5b90-4e88-a0ef-19a2c0251538}">
      <Declaration><![CDATA[METHOD mountUltraKnife : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i :INT;
	curJntPos :Vec8d;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[curJntPos := i_slaveArm.curJntPos;

m_jointMounted[1]:=TRUE;
m_jointMounted[2]:=TRUE;


CASE m_ultrasoundMountStatus OF 
	// To lock panel with instrument
	0:
		//buckle panel with instrument
		FOR i:=3 TO 5 DO
			// check if buckled 
			IF ABS(i_slaveArm.filtJntCurrent[i+3])> m_maxJntCurrent[i] THEN 
				m_jointMounted[i]:=TRUE;
				m_targetMountPos[i+3]:=curJntPos[i+3];
				m_jntOTG[i].init(m_targetMountPos[i+3], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			END_IF
			
			// set target joint position
			IF FALSE = m_jointMounted[i] THEN
				IF i = 5 THEN
					m_targetMountPos[i+3]:=curJntPos[i+3]+m_mountMotionAng[i];
				ELSE
					m_targetMountPos[i+3]:=curJntPos[i+3]-m_mountMotionAng[i];
				END_IF
				
			END_IF
		END_FOR

		// check transition condition
		IF ( m_jointMounted[3] AND m_jointMounted[4] AND m_jointMounted[5] )  THEN
			IF i_slaveArm.instrument.onChipData.m_InstruReadSucceed THEN//Check whether the data is read successfully
				m_ultrasoundMountStatus:=1;
			END_IF
		END_IF

	1:
		//m_jntOPMode[8] := DriverOPMode_Trq;
		// calculation deviates from the instrument zero position
		m_instruZeroDeviation[3] :=  m_ultraKnifeRotaAngleJ3;
		m_instruZeroDeviation[4] :=  i_slaveArm.linkSingle[7] - i_slaveArm.instrument.onChipData.m_InstruPos[4];
		m_ultrasoundMountStatus :=2;
		
	2:// move back to zero position
		//joint4
		IF m_instruZeroDeviation[4]>0 AND m_instruZeroDeviation[4] < pi THEN
			m_instruZeroDeviation[4] := m_instruZeroDeviation[4] - 2*pi;
		ELSIF m_instruZeroDeviation[4]<0 AND m_instruZeroDeviation[4] > -pi THEN
			m_instruZeroDeviation[4] := m_instruZeroDeviation[4] + 2*pi;
		END_IF
	
		// set target joint position
		m_targetMountPos[6]:=curJntPos[6] + m_instruZeroDeviation[3];
		m_targetMountPos[7]:=curJntPos[7] - m_instruZeroDeviation[4];
		m_targetMountPos[8]:=curJntPos[8] - m_instruZeroDeviation[4];

		m_ultrasoundMountStatus :=3;

	3:
		m_isFinished:=TRUE;
		FOR i:=3 TO 4 DO 
			m_jntPosErr[i]:=m_targetMountPos[i+3]-curJntPos[i+3];
			IF ABS(m_jntPosErr[i]) >GVL_SlaveControlParameters.g_jntCtrlAngTolHigh  THEN
				m_isFinished := FALSE;
				EXIT;
			END_IF
		END_FOR	

END_CASE


// traj plan
FOR i:=1 TO 5 DO
	m_jntOTG[i].run(m_targetMountPos[i+3],0.0, o_cmdAcc=>m_cmdJntAcc[3+i],o_cmdVel=>m_cmdJntVel[3+i],o_cmdPos=>m_cmdJntPos[i+3]);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveCtrlMountInstru">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.calcCmdJntPos">
      <LineId Id="506" Count="10" />
      <LineId Id="478" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.init">
      <LineId Id="206" Count="22" />
      <LineId Id="92" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.mountEndoscope">
      <LineId Id="14" Count="36" />
      <LineId Id="62" Count="5" />
      <LineId Id="71" Count="2" />
      <LineId Id="75" Count="0" />
      <LineId Id="77" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.mountInstrument">
      <LineId Id="204" Count="20" />
      <LineId Id="294" Count="1" />
      <LineId Id="297" Count="1" />
      <LineId Id="296" Count="0" />
      <LineId Id="225" Count="60" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.mountUltraKnife">
      <LineId Id="3" Count="73" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>