<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SlaveCtrlPerformance" Id="{b74a4b04-3e61-4772-90fb-e488524a9b33}" SpecialFunc="None">
    <Declaration><![CDATA[// Brief: Slave Arm performance test
FUNCTION_BLOCK FB_SlaveCtrlPerformance EXTENDS FB_SlaveArmCtrlBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR CONSTANT
	//Number of data recording points
	m_dataSum:INT:=8000;
END_VAR

VAR
	//test step
	m_testStep:INT:=-1;
	
	//test joint
	m_testJnt:INT;
	
	//trajectory planner
	m_caliTrajIdx: INT := 1;
	m_caliPlanner: ARRAY[1..4] OF FB_TrajMoveJ;
	m_caliPlannerStart: FB_TrajMoveJ;
	
	//speed test variable
	m_speedMaxTest:BOOL;
	
	//trajectory segment
	m_caliMotionSegs :INT :=4;
	m_graCaliTraj:ARRAY [1..4, 1..g_sJntNum] OF LREAL;
	
	//trajectory velocity/acceleration/jerk
	m_caliMaxjntVel:Vec8d:=[2(2.5*g_deg2Rad), 0.01, 5(2.5*g_deg2Rad)];
	m_caliMaxjntAcc:Vec8d:=[8(0.5)];
	m_caliMaxjntJerk:Vec8d:=[8(2.0)];
	
	//Extreme joint position
	m_minJntPos: ARRAY[1..g_sJntNum] OF LREAL;
	m_maxJntPos: ARRAY[1..g_sJntNum] OF LREAL;
	
	//data record idx
	i,j:INT;
	id,idx:INT;
	
	//Number of data recording points
	m_dataRecordNum_2,m_dataRecordNum_3:INT;
	
	//The current values of the second and third trajectories
	m_jntCurrentId2:ARRAY[1..m_dataSum,1..3] OF LREAL;
	m_jntCurrentId3:ARRAY[1..m_dataSum,1..3] OF LREAL;
	
	//sampling interval
	m_samplingInterval:INT:=80;
	
	//friction record value
	m_CoulombFriction,m_ViscousFriction:ARRAY[1..m_dataSum,1..3] OF LREAL;
	
	//friction summation
	m_CoulombFrictionSum,m_ViscousFrictionSum:ARRAY[1..3] OF LREAL;
	
	//friction averange
	m_CoulombFrictionAve,m_ViscousFrictionAve:ARRAY[1..3] OF LREAL;
	
	//friction maxmum value
	m_CoulombFrictionMax,m_ViscousFrictionMax:ARRAY[1..3] OF LREAL;
	
	//motion Frequency and angular frequency
	//m_Frequency:LREAL:=3; 	m_w:LREAL;
	m_Frequency:LREAL:=1; 	m_w:LREAL;
	
	//motion Frequency and angular frequency for speed test
	//m_FrequencySpeed:LREAL:=0.5; 	m_wSpeed:LREAL;
	m_FrequencySpeed:LREAL:=1; 	m_wSpeed:LREAL;
	
	//Dynamic performance testing time
	m_t:LREAL;
	
	//Dynamic performance testing motion range
	m_motionRange:ARRAY[1..3] OF LREAL:=[0.05,0.05,0.020];
	
	//Starting point for dynamic performance testing
	m_posOffset:ARRAY[1..g_sJntNum] OF LREAL;
	
	//Number of dynamic performance tests
	m_testNum:INT:=5;
	
	//motion range for maximum speed test
	m_motionRangeSpeed:ARRAY[1..3] OF LREAL:=[0.4,0.4,0.15];
	
	//initJntPos,startJntPos,endJntPos :Vec8d;
	initJntPos,startJntPos,endJntPos :Vec8d;
	
	//Motion amplitude and frequency
	m_motionAmplitude:ARRAY[1..3] OF LREAL;
	m_motionRadiusFre:LREAL;	
	m_Fre:LREAL;
	m_testTime:LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[




]]></ST>
    </Implementation>
    <Method Name="calcCmdJntPos" Id="{20b69900-b865-4dfc-a89a-e7d79cde3b01}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntPos : BOOL
VAR_IN_OUT CONSTANT
	// endoscope pose in cart coordinate
	i_endoscopePose : ST_Frame;
	
	// master arm data
	i_masterStatus :ST_MasterStatus;
	
	// setup arm data
	i_setupStatus: ST_SetupStatus;
	
	// slave arm data
	i_slaveArm :FB_SlaveArm;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

CASE m_testStep OF
	0: //test the motion range/joint friction/joint gap		
		IF m_caliPlanner[m_caliTrajIdx].isGene = FALSE THEN
			calcCmdJntPos:=FALSE;
			RETURN;
		END_IF
		
		// traj plan
		calcCmdJntPos :=m_caliPlanner[m_caliTrajIdx].evaluate(m_timePeriod, jntPos=> m_cmdJntPos, jntVel=>m_cmdJntVel, jntAcc=> m_cmdJntAcc);
		
		// check if to transit to next segment		
		IF(m_timePeriod > m_caliPlanner[m_caliTrajIdx].duration) THEN
			m_caliTrajIdx:=m_caliTrajIdx+1;
			m_timePeriod:=0;
			idx:=0;
			id:=0;
		END_IF
		
		// check if to terminated
		IF(m_caliTrajIdx > m_caliMotionSegs) THEN
			m_testStep:=10;
		END_IF
		
		//data record
		IF (m_caliTrajIdx=2) THEN
			//motion from joint min to joint max
			idx:=idx+1;
			IF (idx>=m_samplingInterval) THEN
				idx:=0;
				id:=id+1;
				m_dataRecordNum_2:=id;
				FOR j:=1 TO 3 BY 1 DO
					m_jntCurrentId2[id,j]:=i_slaveArm.filtJntCurrent[j]*gvl_SlaveMotorParameters.g_motorDir[j];
				END_FOR
			END_IF
		ELSIF (m_caliTrajIdx=3) THEN
			//motion from joint max to joint min
			idx:=idx+1;
			IF (idx>=m_samplingInterval) THEN
				idx:=0;
				id:=id+1;
				m_dataRecordNum_3:=id;
				FOR j:=1 TO 3 BY 1 DO
					m_jntCurrentId3[id,j]:=i_slaveArm.filtJntCurrent[j]*gvl_SlaveMotorParameters.g_motorDir[j];
				END_FOR
			END_IF
		END_IF
		
	
	10: //Process the data from the above steps				
		id:=0;		
		FOR i:=1 TO m_dataRecordNum_2 BY 1 DO
			idx:=(m_dataRecordNum_3-i)+1;
			IF (idx>0) THEN
				id:=id+1;  //Number of groups for recording data
				FOR j:=1 TO 3 BY 1 DO
					m_CoulombFriction[i,j]:=(m_jntCurrentId2[i,j]-m_jntCurrentId3[idx,j])/2;
					m_ViscousFriction[i,j]:=(m_jntCurrentId2[i,j]+m_jntCurrentId3[idx,j])/2;
					
					m_CoulombFrictionSum[j]:=m_CoulombFrictionSum[j]+m_CoulombFriction[i,j];
					m_ViscousFrictionSum[j]:=m_ViscousFrictionSum[j]+m_ViscousFriction[i,j];
					
					IF (m_CoulombFriction[i,j]>m_CoulombFrictionMax[j]) THEN
						m_CoulombFrictionMax[j]:=m_CoulombFriction[i,j];
					END_IF
					
					IF (m_ViscousFriction[i,j]>m_ViscousFrictionMax[j]) THEN
						m_ViscousFrictionMax[j]:=m_ViscousFriction[i,j];
					END_IF					
				END_FOR				
			END_IF			
		END_FOR
		
		FOR j:=1 TO 3 BY 1 DO
			m_CoulombFrictionAve[j]:=m_CoulombFrictionSum[j]/id;
			m_ViscousFrictionAve[j]:=m_ViscousFrictionSum[j]/id;
		END_FOR
		i:=1; m_t:=0;
		m_speedMaxTest:=FALSE;
		m_testStep:=20;
		
		
	20: //m_caliPlannerStart initialization		
		IF (m_speedMaxTest=FALSE) THEN
			m_motionAmplitude:=m_motionRange;
        	m_motionRadiusFre:=m_w;
			m_Fre:=m_Frequency;
		ELSE
			m_motionAmplitude:=m_motionRangeSpeed; 
			m_motionRadiusFre:=m_wSpeed;
			m_Fre:=m_FrequencySpeed;
		END_IF
		
		startJntPos:=i_slaveArm.curJntPos; 
		endJntPos:=m_posOffset;
		m_caliPlannerStart.init(startJntPos,endJntPos,m_caliMaxjntVel, m_caliMaxJntAcc, m_caliMaxJntJerk);
		m_timePeriod:=0;
		m_testStep:=30;
		
		
	30: //move to the start point
		IF m_caliPlannerStart.isGene = FALSE THEN
			calcCmdJntPos:=FALSE;
			RETURN;
		END_IF
		calcCmdJntPos :=m_caliPlannerStart.evaluate(m_timePeriod, jntPos=> m_cmdJntPos, jntVel=>m_cmdJntVel, jntAcc=> m_cmdJntAcc);			
		IF(m_timePeriod > m_caliPlannerStart.duration) THEN			
			m_timePeriod:=0;			
			m_testStep:=40;
		END_IF
			
		
	40: //Dynamic tracking capability test---3HZ
		m_t:=m_t+g_slaveArmCtrlCycleTime;
		sinusoidalMotion(posOffset:= endJntPos[i], amplitude:= m_motionAmplitude[i], t:= m_t, w:= m_motionRadiusFre, pos=> m_cmdJntPos[i], vel=> m_cmdJntVel[i], acc=> m_cmdJntAcc[i]);
		m_testTime:=(m_testNum+0.25)/m_Fre;
		
		IF (m_t>m_testTime) THEN
			m_cmdJntVel[i]:=0; 	m_cmdJntAcc[i]:=0;
			i:=i+1; 
			m_t:=0;
			m_testStep:=20;
			IF (i=4) AND (m_speedMaxTest=FALSE) THEN
				i:=1;
				m_speedMaxTest:=TRUE;
				m_testStep:=20;
			ELSIF (i=4) AND (m_speedMaxTest=TRUE) THEN
				i:=1;
				m_testStep:=-1;
				m_isFinished:=TRUE;
			END_IF
		END_IF			
	
		
	50: //
		

	-1: //
END_CASE


]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{c781b2c6-87c5-4eed-8bdf-af8776c3d27f}">
      <Declaration><![CDATA[// override this function in each exact controller
// NOTICE: set joint control mode here, and do some initialization if needed
METHOD PUBLIC init : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm	:FB_SlaveArm;
END_VAR
VAR_IN_OUT 
	r_slaveArmCtrlCmd :ST_SlaveArmCtrlCmds;
END_VAR
VAR
		//
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Init(i_slaveArm,r_slaveArmCtrlCmd);
m_caliTrajIdx :=1;
m_jntOPMode := g_slaveAllPosTrqMode;


//joint position limit
m_minJntPos:=GVL_SlaveMotorParameters.g_minJntPos;
m_maxJntPos:=GVL_SlaveMotorParameters.g_maxJntPos;


//trajectory target position
FOR i:=1 TO 4 BY 1 DO
	FOR j:=1 TO 3 DO
		IF (i=1) THEN
			m_graCaliTraj[i,j]:=m_minJntPos[j];
		ELSIF (i=2) THEN
			m_graCaliTraj[i,j]:=m_maxJntPos[j];
		ELSIF (i=3) THEN
			m_graCaliTraj[i,j]:=m_minJntPos[j];
		ELSIF (i=4) THEN
			m_graCaliTraj[i,j]:=(m_minJntPos[j]+m_maxJntPos[j])/2;
		END_IF
	END_FOR
END_FOR


//first segment---move from the current position to the minimum value
initJntPos:=i_slaveArm.curJntPos;
startJntPos:=initJntPos;
endJntPos:=startJntPos;
FOR j:=1 TO 3 DO
	endJntPos[j]:=m_graCaliTraj[1,j];
END_FOR
m_caliPlanner[1].init(startJntPos,endJntPos,m_caliMaxjntVel, m_caliMaxJntAcc, m_caliMaxJntJerk);


// other segments
FOR i:=2 TO m_caliMotionSegs DO 
	startJntPos := endJntPos;
	endJntPos:=startJntPos;
	FOR j:=1 TO 3 DO
		endJntPos[j]:=m_graCaliTraj[i,j];
	END_FOR
	m_caliPlanner[i].init(startJntPos,endJntPos,m_caliMaxjntVel, m_caliMaxJntAcc, m_caliMaxJntJerk);
END_FOR


//reset the step
m_testStep:=0;


//motion frequency
m_w:=2.0*pi*m_Frequency;
m_wSpeed:=2.0*pi*m_FrequencySpeed;
vecAdd(m_maxJntPos,m_minJntPos,m_posOffset); vecSelfMultiNum(m_posOffset,0.5);


//Initialization of calculation results
FOR j:=1 TO 3 BY 1 DO
	m_CoulombFrictionSum[j]:=0; m_CoulombFrictionMax[j]:=0; m_CoulombFrictionAve[j]:=0;
	m_ViscousFrictionSum[j]:=0; m_ViscousFrictionMax[j]:=0; m_ViscousFrictionAve[j]:=0;
END_FOR


// update commands to arm
copyCmds(r_slaveArmCtrlCmd);]]></ST>
      </Implementation>
    </Method>
    <Method Name="sinusoidalMotion" Id="{87e17a15-12ec-4e4b-a396-a289a8505a82}">
      <Declaration><![CDATA[METHOD sinusoidalMotion : BOOL
VAR_INPUT
	posOffset:LREAL;
	amplitude:LREAL;
	t:LREAL; //time
	w:LREAL; //angular frequency
END_VAR

VAR_OUTPUT
	pos:LREAL;
	vel:LREAL;
	acc:LREAL;
END_VAR

VAR
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
pos:=posOffset+amplitude*SIN(w*t);
vel:=amplitude*w*COS(w*t);
acc:=-amplitude*w*w*SIN(w*t);
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveCtrlPerformance">
      <LineId Id="26" Count="4" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlPerformance.calcCmdJntPos">
      <LineId Id="18" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="49" Count="2" />
      <LineId Id="31" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="2" />
      <LineId Id="94" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="65" Count="2" />
      <LineId Id="54" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="74" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="87" Count="3" />
      <LineId Id="97" Count="0" />
      <LineId Id="91" Count="2" />
      <LineId Id="77" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="140" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="102" Count="1" />
      <LineId Id="144" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="123" Count="2" />
      <LineId Id="115" Count="0" />
      <LineId Id="117" Count="2" />
      <LineId Id="121" Count="1" />
      <LineId Id="120" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="141" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="251" Count="11" />
      <LineId Id="343" Count="0" />
      <LineId Id="264" Count="19" />
      <LineId Id="300" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="284" Count="2" />
      <LineId Id="344" Count="0" />
      <LineId Id="287" Count="5" />
      <LineId Id="326" Count="0" />
      <LineId Id="293" Count="2" />
      <LineId Id="234" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="296" Count="2" />
      <LineId Id="29" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="322" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlPerformance.init">
      <LineId Id="12" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="74" Count="1" />
      <LineId Id="79" Count="5" />
      <LineId Id="72" Count="1" />
      <LineId Id="67" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="35" Count="6" />
      <LineId Id="129" Count="0" />
      <LineId Id="42" Count="8" />
      <LineId Id="23" Count="0" />
      <LineId Id="169" Count="1" />
      <LineId Id="172" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="85" Count="2" />
      <LineId Id="104" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="121" Count="2" />
      <LineId Id="120" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlPerformance.sinusoidalMotion">
      <LineId Id="15" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>