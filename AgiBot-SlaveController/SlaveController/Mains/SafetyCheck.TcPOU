<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="SafetyCheck" Id="{54e6e883-3f22-4a40-9066-2b433bf8009c}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM SafetyCheck
VAR
	// slave robot information, including arm status and cartesian data
	m_slaveStatus AT %I* :ST_slaveStatus;
	
	// slave robot joint data
	m_slaveJointData AT %I* :ST_slaveJointData;
	
	// setup robot information
	m_setupStatus AT %I* :ST_SetupStatus;
	
	// setup robot joint data
	m_setupJointsData AT %I* :ST_SetupJointData;
	
	// master robot data, input from master controller box
	m_masterRobotData AT %I* : MSCommu_MasterStatus;
	
	// error check result
	m_safetyCheckData AT %Q* :ST_SafetyData;
	
	// Output cart status
	m_cartStatus AT%I* : ST_CartStatus;
	
	// cart joint data
	m_cartJointsData AT %I* :ST_CartJointData;
	
	//emergency stop and stop botton
	m_stopButton AT %I*: BOOL;
	m_emergencyStopButton AT %I*: BOOL;
	
	//warning tone
	m_warningTone AT %Q*:ARRAY [1..4] OF BOOL;
	
	m_initFlag:bool;
	
	m_SafetyCheck : Fb_SafetyCheck;
	m_checkVariable : ARRAY[1..g_maxNum] OF checkInputVariable;
	m_EtherCATCheck :ARRAY [1..g_maxNum,1..g_maxArmJoint] OF Fb_EtherCATCheck;
	m_errCode :ARRAY [1..3] OF UDINT;
	i , j: INT;
	
	//error robot data record
	m_dataRecord : Fb_dataRecord;
	
	// original position of remote center point when fisrt enter hold state
	m_dsrRcpPos :ARRAY[1..g_sArmNum] OF Vec3d;
	m_rcpPosErrCounts :ARRAY[1..g_sArmNum] OF INT := [4(0)];
	m_rcpPosErr :ARRAY[1..g_sArmNum] OF Vec3d;		// rcp position error
	m_curJntPosLast : ARRAY [1..g_maxArmNum] OF vec13di;  
	m_armErrCodeRefreshLast : ARRAY [1..4] OF UINT;
	
	m_armsRS:ARRAY [1..g_maxArmNum,1..30] OF RS;//复位优先双稳态器
	m_cartRS:ARRAY [1..30] OF RS;//复位优先双稳态器
	m_scopeArmNoReady : BOOL;
	m_joysticksTrigger : BOOL;
	// wait time before robot init  for ethercat to be statble 
	m_safetyCheckInitWaitTime : LREAL:=0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// reset data
IF FALSE = m_initFlag  THEN
	FOR i:=1  TO g_sArmNum DO 
		m_safetyCheckData.m_slaveErrFlag[i]:=FALSE;
		m_safetyCheckData.m_setupErrFlag[i]:=FALSE;
		m_safetyCheckData.m_cartErrFlag:=FALSE;
	END_FOR
	m_initFlag:=TRUE;
END_IF

armSafetyCheckInputCast();

armSafetyCheckAllowed();

robotPromptMassageCast();

// wait communication to be stable
IF(m_safetyCheckInitWaitTime<g_robotSafetyCheckWaitTime) THEN
	m_safetyCheckInitWaitTime := m_safetyCheckInitWaitTime+g_setupArmCtrlCycleTime;
	RETURN;
END_IF


FOR i:=1  TO g_maxNum DO
	m_SafetyCheck.systemSafetyCheck(i,m_checkVariable,m_cartJointsData,m_setupJointsData,m_slaveJointData);
END_FOR


//error flag to control
readErrFlag();

//Fault code for UI
m_SafetyCheck.errCodeUpdating();

//The fault code is sent to the UI
GVL_interactUI.g_errIdType3:=m_SafetyCheck.o_ErrCode[3];
GVL_interactUI.g_errIdType2:=m_SafetyCheck.o_ErrCode[2];
GVL_interactUI.g_errIdType1:=m_SafetyCheck.o_ErrCode[1];
GVL_interactUI.g_popupErrorArm1 := m_SafetyCheck.m_armErrCodePopup[1];
GVL_interactUI.g_popupErrorArm2 := m_SafetyCheck.m_armErrCodePopup[2];
GVL_interactUI.g_popupErrorArm3 := m_SafetyCheck.m_armErrCodePopup[3];
GVL_interactUI.g_popupErrorArm4 := m_SafetyCheck.m_armErrCodePopup[4];
FOR i:=1  TO g_sArmNum DO
	IF m_SafetyCheck.m_armErrCodeRefresh[i] <> m_armErrCodeRefreshLast[i] THEN
		GVL_interactUI.g_popupRefresh[i] := 1;
	END_IF
	m_armErrCodeRefreshLast[i] := m_SafetyCheck.m_armErrCodeRefresh[i];
END_FOR

//clear fault
IF GVL_interactUI.g_uiFaultReset=1 OR m_masterRobotData.m_uiResetFault = 1 THEN
	m_SafetyCheck.errFlagReset();
	GVL_interactUI.g_uiFaultReset := 0;
END_IF

//robot record information
m_dataRecord.run(m_checkVariable , m_cartStatus , m_cartJointsData , m_setupStatus , m_slaveStatus , m_setupJointsData , m_slaveJointData );

m_warningTone := warningTone();
]]></ST>
    </Implementation>
    <Method Name="armSafetyCheckAllowed" Id="{c2ebef6f-e712-49e3-9955-377a0083e93a}">
      <Declaration><![CDATA[METHOD armSafetyCheckAllowed : BOOL
VAR_INPUT
END_VAR
VAR
	i , j : INT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO g_maxArmNum DO
	FOR j := 1 TO g_maxArmJoint DO
		IF j > 5 THEN
			//fault code 16#3003 
			m_SafetyCheck.checkPermit[i].m_linkEncErr[j] := m_checkVariable[i].m_slaveDriverInput[j-g_setupJntNum].m_statusWord<>0;
			//fault code 16#3002 
			m_SafetyCheck.checkPermit[i].m_currentIsNotUpdate[j] :=m_checkVariable[i].m_slaveDriverInput[j-g_setupJntNum].m_statusWord<>0 ;
			//fault code 16#2002
			m_SafetyCheck.checkPermit[i].m_armJntFollowErr[j] := m_checkVariable[i].m_slaveDriverInput[j-g_setupJntNum].m_statusWord = DriverStatusWord_OP ;
			//fault code 16#200B
			m_SafetyCheck.checkPermit[i].m_jntCurrentCtrlErr[j] := m_checkVariable[i].m_slaveDriverOutput[j-g_setupJntNum].m_opMode = DriverOPMode_Trq;
		ELSE
			//fault code 16#3003 
			m_SafetyCheck.checkPermit[i].m_linkEncErr[j] := m_checkVariable[i].m_setupDriverInput[j].m_statusWord<>0;
			//fault code 16#3002
			m_SafetyCheck.checkPermit[i].m_currentIsNotUpdate[j] := m_checkVariable[i].m_setupDriverInput[j].m_statusWord<>0 AND j > 2;
			//fault code 16#2002
			m_SafetyCheck.checkPermit[i].m_armJntFollowErr[j] := m_checkVariable[i].m_setupDriverInput[j].m_statusWord = DriverStatusWord_OP AND j > 2;
			//fault code 16#200B
			m_SafetyCheck.checkPermit[i].m_jntCurrentCtrlErr[j] := m_checkVariable[i].m_setupDriverOutput[j].m_opMode = DriverOPMode_Trq AND j > 2;
			
		END_IF
		//fault code 16#3002
		m_SafetyCheck.checkPermit[i].m_jntStatusErr[j] := TRUE;
		//fault code 16#3004
		m_SafetyCheck.checkPermit[i].m_driveErr[j] := TRUE;
		//fault code 16#3005
		m_SafetyCheck.checkPermit[i].m_armJntEncErr[j] := TRUE;
		//fault code 16#3006
		m_SafetyCheck.checkPermit[i].m_outOfLimit[j] := TRUE;
		//fault code 16#3008
		m_SafetyCheck.checkPermit[i].m_motPhieErr[j] := TRUE;
		//fault code 16#2003
		m_SafetyCheck.checkPermit[i].m_jntVelErr[j] := TRUE;
		//fault code 16#2004
		m_SafetyCheck.checkPermit[i].m_spacePoseErr[j] := m_slaveStatus.m_armState[i] = SlaveArmState_MasterSlave AND  norm(m_slaveStatus.m_masterSlavePoseError[i])<g_smallNum;
		//fault code 16#2005
		m_SafetyCheck.checkPermit[i].m_jntCurrentErr[j] := TRUE;
		//fault code 16#2007
		m_SafetyCheck.checkPermit[i].m_fixedPointErr := m_slaveStatus.m_armState[i] = SlaveArmState_MasterSlave;
		//fault code 16#2008
		m_SafetyCheck.checkPermit[i].m_cmdJntSaltation[j] := m_slaveStatus.m_armState[i] = SlaveArmState_MasterSlave;
		//fault code 16#200F
		m_SafetyCheck.checkPermit[i].m_instruOpenAngle := FALSE;
	END_FOR
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="armSafetyCheckInputCast" Id="{598e934b-b439-4bef-985d-1ea697c2fcb0}">
      <Declaration><![CDATA[METHOD armSafetyCheckInputCast : BOOL
VAR_INPUT
END_VAR

VAR
	i , j: INT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO g_maxArmNum DO
	//emergency stop 、stop button and ui stop 
	m_checkVariable[i].EmergencyStop := m_emergencyStopButton;
	m_checkVariable[i].PCStopButton := GVL_interactUI.g_stopButtonFormUI;
	m_checkVariable[i].SlaveStopButton := m_stopButton;
	m_checkVariable[i].MasterStopButton := m_masterRobotData.m_masterStopButton;
	
	IF m_setupStatus.m_armState[i] <> SetupArmState_Hold THEN
		m_dsrRcpPos[i] := m_setupStatus.m_rcPos[i];
	END_IF
	m_checkVariable[i].m_rcpCheck := m_SafetyCheck.rcpErrCheck(m_dsrRcpPos[i],  m_setupStatus.m_rcPos[i], m_rcpPosErrCounts[i] ,m_rcpPosErr[i]);
	m_checkVariable[i].m_spacePoseErr := m_SafetyCheck.poseErrCheck(m_slaveStatus.m_cmdArmPose[i], m_slaveStatus.m_simArmPose[i] );
	
	//slave robot input cast
	FOR j:=1 TO  g_sJntNum DO 		
		m_checkVariable[i].m_slaveDriverInput[j] := SlaveArmControl.m_slaveRobot.m_slaveArms[i].m_joints[j].m_motorInputs;
		//3 joint drive error word at number 6 , move one bit to the right to align with the other joints
		IF j = 3 THEN
			m_checkVariable[i].m_slaveDriverInput[j].m_driverError := SHR(SlaveArmControl.m_slaveRobot.m_slaveArms[i].m_joints[j].m_motorInputs.m_driverError,1);
		END_IF
		m_checkVariable[i].m_slaveDriverOutput[j] := SlaveArmControl.m_slaveRobot.m_slaveArms[i].m_joints[j].m_motorOutputs;
		m_checkVariable[i].m_EtherCATState[j+g_setupJntNum] := m_EtherCATCheck[i,j+g_setupJntNum].EtherCATVerify(GVL_SlaveJointEncoderCaliData.g_slaveArmNetID[i],g_JointNetPort[j+g_setupJntNum]);
		m_checkVariable[i].m_motorEncoderSaltaValue[j+g_setupJntNum] := ABS(m_checkVariable[i].m_slaveDriverInput[j+g_setupJntNum].m_motorEncoder - m_curJntPosLast[i][j+g_setupJntNum]);
		m_curJntPosLast[i][j+g_setupJntNum] := m_checkVariable[i].m_slaveDriverInput[j+g_setupJntNum].m_motorEncoder;
	END_FOR
	
	//setup robot input cast
	FOR j:=1 TO  g_setupJntNum DO 		
		m_checkVariable[i].m_setupDriverInput[j] := SetupArmControl.m_setupRobot.m_setupArms[i].m_joints[j].m_motorInputs;
		m_checkVariable[i].m_setupDriverOutput[j] := SetupArmControl.m_setupRobot.m_setupArms[i].m_joints[j].m_motorOutputs;
		m_checkVariable[i].m_EtherCATState[j] := m_EtherCATCheck[i,j].EtherCATVerify(GVL_SlaveJointEncoderCaliData.g_slaveArmNetID[i],g_JointNetPort[j]);
		m_checkVariable[i].m_motorEncoderSaltaValue[j] := m_checkVariable[i].m_setupDriverInput[j].m_motorEncoder - m_curJntPosLast[i][j];
		m_curJntPosLast[i][j] := m_checkVariable[i].m_setupDriverInput[j].m_motorEncoder;
	END_FOR

END_FOR

//setup robot in-out variable cast
FOR j:=1 TO  g_cartJntNum DO
	m_checkVariable[5].EmergencyStop := m_emergencyStopButton;
	m_checkVariable[5].PCStopButton := GVL_interactUI.g_stopButtonFormUI;
	m_checkVariable[5].SlaveStopButton := m_stopButton;
	m_checkVariable[5].m_cartDriverInput[j] := CartControl.m_cartRobot.m_slaveCart.m_cartJoints[j].m_motorInputs;
	m_checkVariable[5].m_cartDriverOutput[j] := CartControl.m_cartRobot.m_slaveCart.m_cartJoints[j].m_motorOutputs;
	m_checkVariable[5].m_cartEtherCATState[j] := m_EtherCATCheck[5,j].EtherCATVerify(GVL_CartJointEncoderCaliData.g_slaveCartNetID,GVL_CartJointEncoderCaliData.g_slaveCartJointNetPort[j]);
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="joystickAdjust" Id="{38ce96d9-75fc-4e3b-9d39-89b30533a7ac}">
      <Declaration><![CDATA[METHOD joystickAdjust : BOOL
VAR_IN_OUT CONSTANT
	i_joystickValue : vec8d;
END_VAR

VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i := 1 TO 4 DO
	IF 492 > i_joystickValue[i] OR i_joystickValue[i] > 532 THEN
		joystickAdjust := TRUE;
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="readErrFlag" Id="{c6c3fbb5-bc5f-41ea-91b5-687651d637ca}">
      <Declaration><![CDATA[METHOD readErrFlag : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1  TO g_sArmNum DO
	m_safetyCheckData.m_slaveErrFlag[i] := m_SafetyCheck.m_armErrFlag[i,2] OR m_SafetyCheck.m_armErrFlag[i,3];
	m_safetyCheckData.m_setupErrFlag[i] := m_SafetyCheck.m_armErrFlag[i,2] OR m_SafetyCheck.m_armErrFlag[i,3];
END_FOR


GVL_interactUI.g_slaveRecoverErrFlag := BOOL_TO_INT((m_SafetyCheck.m_armErrFlag[1,2] OR m_SafetyCheck.m_armErrFlag[2,2] OR m_SafetyCheck.m_armErrFlag[3,2] OR m_SafetyCheck.m_armErrFlag[4,2]
														OR m_SafetyCheck.m_armErrFlag[g_cartNum,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,0,2]) AND GVL_interactUI.g_slaveRunAlone) ;

//cart error flag
m_safetyCheckData.m_cartErrFlag := m_SafetyCheck.m_armErrFlag[g_cartNum,2] OR m_SafetyCheck.m_armErrFlag[g_cartNum,3];
//cart stead foot error flag
m_safetyCheckData.m_cartSteadyFootErr := m_SafetyCheck.m_jntErrFlag[g_cartNum,1,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,1,3] 
																	OR m_SafetyCheck.m_jntErrFlag[g_cartNum,2,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,2,3] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,0,2];
//cart wheel error flag
m_safetyCheckData.m_cartWheelErr := m_SafetyCheck.m_jntErrFlag[g_cartNum,3,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,3,3]
																OR m_SafetyCheck.m_jntErrFlag[g_cartNum,4,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,4,3] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,0,2];
//cart stand column error flag
m_safetyCheckData.m_cartStandColumnErr := m_SafetyCheck.m_jntErrFlag[g_cartNum,5,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,5,3] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,0,2];
//cart adjust joint contains 6, 7, and 8 joints
m_safetyCheckData.m_cartAdjustErr := m_SafetyCheck.m_jntErrFlag[g_cartNum,6,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,6,3] 
															OR m_SafetyCheck.m_jntErrFlag[g_cartNum,7,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,7,3]
															OR m_SafetyCheck.m_jntErrFlag[g_cartNum,8,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,8,3] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,0,2];
//cart overhang error flag
m_safetyCheckData.m_cartOverhangErr := m_SafetyCheck.m_jntErrFlag[g_cartNum,8,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,8,3] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,0,2] OR NOT m_emergencyStopButton;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="robotPromptMassageCast" Id="{4528e69f-5454-4a94-84aa-1a99d7ab54e4}">
      <Declaration><![CDATA[METHOD robotPromptMassageCast : BOOL
VAR_IN_OUT CONSTANT
END_VAR

VAR
	i : UDINT;
	m_uiCtrlAdjustFlag : BOOL;
	m_uiCtrlJoystickEnable : BOOL;
	instrument: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO 4 DO
	//0*1021
	m_armsRS[i,1](SET:= m_slaveStatus.m_panelClampErrId[i]=1, 
							RESET1:= NOT m_slaveStatus.m_panelInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[1]);
	m_checkVariable[i].m_promptLocation[1] := i + 3;
							
	//0*1022		
	m_armsRS[i,2](SET:= m_slaveStatus.m_panelClampErrId[i]=2, 
							RESET1:= NOT m_slaveStatus.m_panelInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[2]);
	m_checkVariable[i].m_promptLocation[2] := i + 3;
	
	//0*1023				
	m_armsRS[i,3](SET:= m_slaveStatus.m_instruReadErrId[i]=1, 
							RESET1:= NOT m_armsRS[i,3].SET OR NOT m_slaveStatus.m_instruInstallStatus[i] , 
							Q1=> m_checkVariable[i].m_promptStatus[3]);
	m_checkVariable[i].m_promptLocation[3] := i + 3;
						
	//0*1024	
	m_armsRS[i,4](SET:= m_slaveStatus.m_instruReadErrId[i]=2, 
							RESET1:=NOT m_armsRS[i,4].SET OR NOT m_slaveStatus.m_instruInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[4]);
	m_checkVariable[i].m_promptLocation[4] := i + 3;
	
	//0*1025
	m_armsRS[i,5](SET:= m_slaveStatus.m_instruClampErrId[i]=1, 
							RESET1:=NOT m_armsRS[i,5].SET OR NOT m_slaveStatus.m_instruInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[5]);
	m_checkVariable[i].m_promptLocation[5] := i + 3;
	
	 //0*1026
	m_armsRS[i,6](SET:= m_slaveStatus.m_instruClampErrId[i]=2, 
							RESET1:=NOT m_armsRS[i,6].SET OR NOT m_slaveStatus.m_instruInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[6]);
	m_checkVariable[i].m_promptLocation[6] := i + 3;
	
	//0*1027
	m_armsRS[i,7](SET:= m_slaveStatus.m_instruReadErrId[i]=3, 
							RESET1:=NOT m_armsRS[i,7].SET OR NOT m_slaveStatus.m_instruInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[7]);
	m_checkVariable[i].m_promptLocation[7] := i + 3;
	
	//0*1028	
	m_armsRS[i,8](SET:=NOT m_slaveStatus.m_selfCheckPass[i] AND m_slaveStatus.m_panelInstallStatus[i], 
							RESET1:= NOT m_armsRS[i,8].SET, 
							Q1=> m_checkVariable[i].m_promptStatus[8]);
	m_checkVariable[i].m_promptLocation[8] := i + 3;
				
	//0*1029
	
	 //0*102A
	//m_armsRS[i,10](SET:= m_slaveStatus.m_instruInstallStatus[i] AND NOT m_slaveStatus.m_trocarOnFlag[i], 
	//						RESET1:= NOT m_armsRS[i,10].SET, 
	//						Q1=> m_checkVariable[i].m_promptStatus[10]);
	//m_checkVariable[i].m_promptLocation[10] := i + 3;	
	
	 //0*102B
	FOR j:=1 TO g_mArmNum DO 
		IF i = m_masterRobotData.m_teleSlaveArmIdx[j] THEN
			m_armsRS[i,11](SET:=m_slaveStatus.m_armState[i] = SlaveArmState_Disable AND m_masterRobotData.m_tryMSControl[j] =1, 
									RESET1:= NOT m_armsRS[i,11].SET, 
									Q1=> m_checkVariable[i].m_promptStatus[11]);
			m_checkVariable[i].m_promptLocation[11] := i + 3;
		END_IF
	END_FOR
	
	//0*102C
	FOR j:=1 TO g_mArmNum DO 
		IF i = m_masterRobotData.m_teleSlaveArmIdx[j] THEN
			m_armsRS[i,12](SET:=NOT (SlaveArmState_InstruReady<= m_slaveStatus.m_armState[i] AND m_slaveStatus.m_armState[i] <= SlaveArmState_EndoScope) AND m_masterRobotData.m_tryMSControl[j] =1 AND m_slaveStatus.m_instruStauts[i].m_ready AND m_slaveStatus.m_armState[i] <> SlaveArmState_Disable, 
									RESET1:= NOT m_armsRS[i,12].SET, 
									Q1=> m_checkVariable[i].m_promptStatus[12]);
			m_checkVariable[i].m_promptLocation[12] := i + 3;
		END_IF
	END_FOR
	
				
	//0*102D
	m_armsRS[i,13](SET:= norm(m_slaveStatus.m_masterSlavePoseError[i]) > g_smallNum AND m_slaveStatus.m_armState[i] = SlaveArmState_MasterSlave, 
							RESET1:= NOT m_armsRS[i,13].SET, 
							Q1=> m_checkVariable[i].m_promptStatus[13]);
	m_checkVariable[i].m_promptLocation[13] := i + 3;
	
	
	//0*102E
	m_armsRS[i,14](SET:= NOT SlaveArmControl.m_slaveRobot.m_panelMountedFlag[i] AND (m_masterRobotData.m_tryMSControl[1] =1 OR m_masterRobotData.m_tryMSControl[2] =1) AND m_slaveStatus.m_selfCheckPass[i],
							RESET1:= NOT m_armsRS[i,14].SET, 
							Q1=> m_checkVariable[i].m_promptStatus[14]);
	m_checkVariable[i].m_promptLocation[14] := i + 3;		
	
	//0*102F
	IF InstruType_endoscope = m_slaveStatus.m_instruStauts[i].m_type AND m_slaveStatus.m_endoscopeMounted THEN
		m_scopeArmNoReady := m_slaveStatus.m_armState[i] <> SlaveArmState_ScopeReady AND m_slaveStatus.m_armState[i] <> SlaveArmState_EndoScope;
		m_armsRS[i,15](SET:= (NOT m_slaveStatus.m_endoscopeMounted OR m_scopeArmNoReady) AND (m_masterRobotData.m_tryMSControl[1] =1 OR m_masterRobotData.m_tryMSControl[2] =1), 
								RESET1:= NOT m_armsRS[i,15].SET, 
								Q1=> m_checkVariable[i].m_promptStatus[15]);
		m_checkVariable[i].m_promptLocation[15] := i + 3;	
	ELSE
		m_checkVariable[i].m_promptStatus[15] := FALSE;
	END_IF
END_FOR

//0*102F		预留  没有卡接内窥镜时的检测	
//m_cartRS[15](SET:= NOT m_slaveStatus.m_endoscopeMounted AND (m_masterStatus.m_tryMSControl[1] =1 OR m_masterStatus.m_tryMSControl[2] =1), 
//						RESET1:= NOT m_cartRS[15].SET, 
//						Q1=> m_checkVariable[g_cartNum].m_promptStatus[15]);
//m_checkVariable[g_cartNum].m_promptLocation[15] := 16#0C;


//0*1030			
m_cartRS[16](SET:= NOT m_slaveStatus.m_masterOnLine, 
						RESET1:= m_slaveStatus.m_masterOnLine, 
						Q1=> m_checkVariable[g_cartNum].m_promptStatus[16]);
m_checkVariable[g_cartNum].m_promptLocation[16] := 16#0C;

//0*1031
m_cartRS[17](SET:=m_cartStatus.m_cartDumpEnergy <= 30 , 
						RESET1:= m_cartStatus.m_cartDumpEnergy>30, 
						Q1=> m_checkVariable[g_cartNum].m_promptStatus[17]);
m_checkVariable[g_cartNum].m_promptLocation[17] := g_cartNum + 3;

//0*1032	

//0*1033
m_cartRS[19](SET:= m_cartStatus.m_sdrivingLeverSensorManualFlag, 
						RESET1:=NOT m_cartStatus.m_sdrivingLeverSensorManualFlag, 
						Q1=> m_checkVariable[g_cartNum].m_promptStatus[19]);
m_checkVariable[g_cartNum].m_promptLocation[19] := g_cartNum + 3;

 //0*1034
m_uiCtrlJoystickEnable := m_cartStatus.m_uiControl.m_cameraJoystickEnable OR m_cartStatus.m_uiControl.m_joystickEnable;
m_joysticksTrigger :=  joystickAdjust(m_cartStatus.m_joystickValue);
m_cartRS[20](SET:= m_cartStatus.m_trocarOnFlag=0 AND NOT m_uiCtrlJoystickEnable AND m_joysticksTrigger, 
						RESET1:= NOT m_cartRS[20].SET, 
						Q1=> m_checkVariable[g_cartNum].m_promptStatus[20]);
m_checkVariable[g_cartNum].m_promptLocation[20] := g_cartNum + 3;
					
//0*1035
m_uiCtrlAdjustFlag := m_cartStatus.m_uiControl.m_cameraJoystickEnable OR m_cartStatus.m_uiControl.m_dockingEnable OR m_cartStatus.m_uiControl.m_drapingEnable
							OR m_cartStatus.m_uiControl.m_joystickEnable OR m_cartStatus.m_uiControl.m_packageEnable;
m_cartRS[21](SET:= m_cartStatus.m_trocarOnFlag>0 AND m_uiCtrlAdjustFlag, 
						RESET1:= m_cartStatus.m_trocarOnFlag=0 OR NOT m_uiCtrlAdjustFlag, 
						Q1=> m_checkVariable[g_cartNum].m_promptStatus[21]);
m_checkVariable[g_cartNum].m_promptLocation[21] := g_cartNum + 3;

//0*1036
m_cartRS[22](SET:= m_cartStatus.m_uiControl.m_joystickEnable AND (m_cartStatus.m_jntPosReachLimit[5] OR m_cartStatus.m_jntPosReachLimit[6] OR m_cartStatus.m_jntPosReachLimit[7] OR m_cartStatus.m_jntPosReachLimit[8]), 
						RESET1:= NOT m_cartRS[22].SET, 
						Q1=> m_checkVariable[g_cartNum].m_promptStatus[22]);
m_checkVariable[g_cartNum].m_promptLocation[22] := g_cartNum + 3;

						
]]></ST>
      </Implementation>
    </Method>
    <Method Name="warningTone" Id="{82112973-2b93-4990-831a-9a609be275a4}">
      <Declaration><![CDATA[METHOD warningTone : vec4b
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (GVL_interactUI.g_curErrType=3) THEN
	warningTone[1] := TRUE;
	warningTone[2] := FALSE;
	warningTone[3] := FALSE;
ELSIF (GVL_interactUI.g_curErrType=2) THEN
	warningTone[1] := FALSE;
	warningTone[2] := TRUE;
	warningTone[3] := FALSE;
//ELSIF (GVL_interactUI.g_curErrType=1) THEN
//	warningTone[1] := TRUE;
//	warningTone[2] := TRUE;
//	warningTone[3] := FALSE;
ELSIF (CartControl.m_cartRobot.m_slaveCart.m_columnJntVel <> 0 AND NOT CartControl.m_cartRobot.m_slaveCart.m_columnAdjustEnable) THEN
	warningTone[1] := FALSE;
	warningTone[2] := FALSE;
	warningTone[3] := TRUE;
//ELSIF m_cartStatus.m_CartState >= CartJointState_HangAdjust AND  m_cartStatus.m_CartState <= CartJointState_StandColuAdjust THEN
//	warningTone[1] := TRUE;
//	warningTone[2] := FALSE;
//	warningTone[3] := TRUE;
ELSE
	warningTone[1] := FALSE;
	warningTone[2] := FALSE;
	warningTone[3] := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="SafetyCheck">
      <LineId Id="350" Count="58" />
      <LineId Id="66" Count="0" />
    </LineIds>
    <LineIds Name="SafetyCheck.armSafetyCheckAllowed">
      <LineId Id="80" Count="27" />
      <LineId Id="128" Count="3" />
      <LineId Id="108" Count="13" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="SafetyCheck.armSafetyCheckInputCast">
      <LineId Id="190" Count="45" />
      <LineId Id="164" Count="0" />
    </LineIds>
    <LineIds Name="SafetyCheck.joystickAdjust">
      <LineId Id="3" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="SafetyCheck.readErrFlag">
      <LineId Id="29" Count="7" />
      <LineId Id="39" Count="17" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="SafetyCheck.robotPromptMassageCast">
      <LineId Id="168" Count="152" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="SafetyCheck.warningTone">
      <LineId Id="24" Count="7" />
      <LineId Id="44" Count="15" />
      <LineId Id="40" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>