<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="SafetyCheck" Id="{54e6e883-3f22-4a40-9066-2b433bf8009c}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM SafetyCheck
VAR
	// slave robot information, including arm status and cartesian data
	m_slaveStatus AT %I* :ST_slaveStatus;
	
	// slave robot joint data
	m_slaveJointData AT %I* :ST_slaveJointData;
	
	// setup robot information
	m_setupStatus AT %I* :ST_SetupStatus;
	
	// setup robot joint data
	m_setupJointsData AT %I* :ST_SetupJointData;
	
	// error check result
	m_safetyCheckData AT %Q* :ST_SafetyData;
	
	// Output cart status
	m_cartStatus AT%I* : ST_CartStatus;
	
	// cart joint data
	m_cartJointsData AT %I* :ST_CartJointData;
	
	//emergency stop and stop botton
	m_stopButton AT %I*: BOOL;
	m_emergencyStopButton AT %I*: BOOL;
	
	//warning tone
	m_warningTone AT %Q*:ARRAY [1..4] OF BOOL;
	
	m_initFlag:bool;
	
	m_SafetyCheck : Fb_SafetyCheck;
	m_checkVariable : ARRAY[1..g_maxNum] OF checkInputVariable;
	m_EtherCATCheck :ARRAY [1..g_maxNum,1..g_maxArmJoint] OF Fb_EtherCATCheck;
	m_errCode :ARRAY [1..3] OF UDINT;
	i , j: INT;
	
	//error robot data record
	m_dataRecord : Fb_dataRecord;
	
	// original position of remote center point when fisrt enter hold state
	m_dsrRcpPos :ARRAY[1..g_sArmNum] OF Vec3d;
	m_rcpPosErrCounts :ARRAY[1..g_sArmNum] OF INT := [4(0)];
	m_rcpPosErr :ARRAY[1..g_sArmNum] OF Vec3d;		// rcp position error
	
	m_armsRS:ARRAY [1..g_maxArmNum,1..20] OF RS;//复位优先双稳态器
	m_cartRS:ARRAY [1..20] OF RS;//复位优先双稳态器
	
	// wait time before robot init  for ethercat to be statble 
	m_safetyCheckInitWaitTime : LREAL:=0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// reset data
IF FALSE = m_initFlag  THEN
	FOR i:=1  TO g_sArmNum DO 
		m_safetyCheckData.m_slaveErrFlag[i]:=FALSE;
		m_safetyCheckData.m_setupErrFlag[i]:=FALSE;
		m_safetyCheckData.m_cartErrFlag:=FALSE;
	END_FOR
	m_initFlag:=TRUE;
END_IF

armSafetyCheckInputCast();

armSafetyCheckAllowed();

robotPromptMassageCast();

// wait communication to be stable
IF(m_safetyCheckInitWaitTime<g_robotSafetyCheckWaitTime) THEN
	m_safetyCheckInitWaitTime := m_safetyCheckInitWaitTime+g_setupArmCtrlCycleTime;
	RETURN;
END_IF


FOR i:=1  TO g_maxNum DO
	m_SafetyCheck.systemSafetyCheck(i,m_checkVariable,m_cartJointsData,m_setupJointsData,m_slaveJointData);
END_FOR


//error flag to control
readErrFlag();

//Fault code for UI
m_SafetyCheck.errCodeUpdating();

//The fault code is sent to the UI
GVL_com_upper_PC.error_ID_type3:=m_SafetyCheck.o_ErrCode[3];
GVL_com_upper_PC.error_ID_type2:=m_SafetyCheck.o_ErrCode[2];
GVL_com_upper_PC.error_ID_type1:=m_SafetyCheck.o_ErrCode[1];

//clear fault
IF GVL_com_upper_PC.clear_Cart_fault=1 THEN
	m_SafetyCheck.errFlagReset();
	GVL_com_upper_PC.clear_Cart_fault := 0;
END_IF

//robot record information
//m_dataRecord.run(m_checkVariable , m_cartStatus , m_cartJointsData , m_setupStatus , m_slaveStatus , m_setupJointsData , m_slaveJointData );

m_warningTone := warningTone();
]]></ST>
    </Implementation>
    <Method Name="armSafetyCheckAllowed" Id="{c2ebef6f-e712-49e3-9955-377a0083e93a}">
      <Declaration><![CDATA[METHOD armSafetyCheckAllowed : BOOL
VAR_INPUT
END_VAR
VAR
	i , j : INT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i := 1 TO g_maxArmNum DO
	FOR j := 1 TO g_maxArmJoint DO
		IF j > 5 THEN
			//fault code 16#3003 
			m_SafetyCheck.checkPermit[i].m_linkEncErr[j] := m_checkVariable[i].m_slaveDriverInput[j-g_setupJntNum].m_statusWord<>0;
			//fault code 16#3002 
			m_SafetyCheck.checkPermit[i].m_currentIsNotUpdate[j] :=m_checkVariable[i].m_slaveDriverInput[j-g_setupJntNum].m_statusWord<>0 AND j > 2;
			//fault code 16#2002
			m_SafetyCheck.checkPermit[i].m_armJntFollowErr[j] := m_checkVariable[i].m_slaveDriverInput[j-g_setupJntNum].m_statusWord = DriverStatusWord_OP AND j > 2;
		ELSE
			//fault code 16#3003 
			m_SafetyCheck.checkPermit[i].m_linkEncErr[j] := m_checkVariable[i].m_setupDriverInput[j].m_statusWord<>0;
			//fault code 16#3002
			m_SafetyCheck.checkPermit[i].m_currentIsNotUpdate[j] := m_checkVariable[i].m_setupDriverInput[j].m_statusWord<>0 AND j > 2;
			//fault code 16#2002
			m_SafetyCheck.checkPermit[i].m_armJntFollowErr[j] := m_checkVariable[i].m_setupDriverInput[j].m_statusWord = DriverStatusWord_OP AND j > 2;
			
		END_IF
		//fault code 16#3002
		m_SafetyCheck.checkPermit[i].m_jntStatusErr[j] := TRUE;
		//fault code 16#3004
		m_SafetyCheck.checkPermit[i].m_driveErr[j] := TRUE;
		//fault code 16#3005
		m_SafetyCheck.checkPermit[i].m_armJntEncErr[j] := TRUE;
		//fault code 16#2003
		m_SafetyCheck.checkPermit[i].m_jntVelErr[j] := TRUE;
		//fault code 16#2004
		m_SafetyCheck.checkPermit[i].m_spacePoseErr[j] := m_slaveStatus.m_armState[i] = SlaveArmState_MasterSlave AND  norm(m_slaveStatus.m_masterSlavePoseError[i])<g_smallNum;
		//fault code 16#2005
		m_SafetyCheck.checkPermit[i].m_jntCurrentErr[j] := TRUE;
		//fault code 16#2007
		m_SafetyCheck.checkPermit[i].m_fixedPointErr := m_slaveStatus.m_armState[i] = SlaveArmState_MasterSlave;
		//fault code 16#200E
		m_SafetyCheck.checkPermit[i].m_instruSingularity := FALSE;
		//fault code 16#200F
		m_SafetyCheck.checkPermit[i].m_instruOpenAngle := FALSE;
	END_FOR
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="armSafetyCheckInputCast" Id="{598e934b-b439-4bef-985d-1ea697c2fcb0}">
      <Declaration><![CDATA[METHOD armSafetyCheckInputCast : BOOL
VAR_INPUT
END_VAR

VAR
	i , j: INT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i := 1 TO g_maxArmNum DO
	//emergency stop 、stop button and ui stop 
	m_checkVariable[i].EmergencyStop := m_emergencyStopButton;
	m_checkVariable[i].PCStopButton := GVL_com_upper_PC.stop_button;
	m_checkVariable[i].SlaveStopButton := m_stopButton;
	//m_SafetyCheck.AlarmVar[i].MasterStopButton
	
	IF m_setupStatus.m_armState[i] <> SetupArmState_Hold THEN
		m_dsrRcpPos[i] := m_setupStatus.m_rcPos[i];
	END_IF
	m_checkVariable[i].m_rcpCheck := m_SafetyCheck.rcpErrCheck(m_dsrRcpPos[i],  m_setupStatus.m_rcPos[i], m_rcpPosErrCounts[i] ,m_rcpPosErr[i]);
	
	m_checkVariable[i].m_spacePoseErr := m_SafetyCheck.poseErrCheck(m_slaveStatus.m_cmdArmPose[i], m_slaveStatus.m_simArmPose[i] );
	FOR j:=1 TO  g_sJntNum DO 		
		m_checkVariable[i].m_slaveDriverInput[j] := SlaveArmControl.m_slaveRobot.m_slaveArms[i].m_joints[j].m_motorInputs;
		m_checkVariable[i].m_slaveDriverOutput[j] := SlaveArmControl.m_slaveRobot.m_slaveArms[i].m_joints[j].m_motorOutputs;
		
		m_checkVariable[i].m_EtherCATState[j+g_setupJntNum] := m_EtherCATCheck[i,j+g_setupJntNum].EtherCATVerify(g_ArmNetID[i],g_JointNetPort[j+g_setupJntNum]);
	END_FOR
	
	FOR j:=1 TO  g_setupJntNum DO 		
		m_checkVariable[i].m_setupDriverInput[j] := SetupArmControl.m_setupRobot.m_setupArms[i].m_joints[j].m_motorInputs;
		m_checkVariable[i].m_setupDriverOutput[j] := SetupArmControl.m_setupRobot.m_setupArms[i].m_joints[j].m_motorOutputs;
		m_checkVariable[i].m_EtherCATState[j] := m_EtherCATCheck[i,j].EtherCATVerify(g_ArmNetID[i],g_JointNetPort[j]);
	END_FOR

END_FOR

FOR j:=1 TO  g_cartJntNum DO
	m_checkVariable[5].m_cartDriverInput[j] := CartControl.m_cartRobot.m_slaveCart.m_cartJoints[j].m_motorInputs;
	m_checkVariable[5].m_cartDriverOutput[j] := CartControl.m_cartRobot.m_slaveCart.m_cartJoints[j].m_motorOutputs;
	m_checkVariable[5].m_cartEtherCATState[j] := m_EtherCATCheck[5,j].EtherCATVerify(g_cartNetID,g_cartJointNetPort[j]);
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="joystickAdjust" Id="{38ce96d9-75fc-4e3b-9d39-89b30533a7ac}">
      <Declaration><![CDATA[METHOD joystickAdjust : BOOL
VAR_IN_OUT CONSTANT
	i_joystickValue : vec8d;
END_VAR

VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i := 1 TO 4 DO
	IF i_joystickValue[i] <> 512 THEN
		joystickAdjust := TRUE;
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="readErrFlag" Id="{c6c3fbb5-bc5f-41ea-91b5-687651d637ca}">
      <Declaration><![CDATA[METHOD readErrFlag : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i:=1  TO g_sArmNum DO
	m_safetyCheckData.m_slaveErrFlag[i] := m_SafetyCheck.m_armErrFlag[i,2] OR m_SafetyCheck.m_armErrFlag[i,3];
	m_safetyCheckData.m_setupErrFlag[i] := m_SafetyCheck.m_armErrFlag[i,2] OR m_SafetyCheck.m_armErrFlag[i,3];
END_FOR


m_safetyCheckData.m_cartErrFlag := m_SafetyCheck.m_armErrFlag[g_cartNum,2] OR m_SafetyCheck.m_armErrFlag[g_cartNum,3];
//cart stead foot error flag
m_safetyCheckData.m_cartSteadyFootErr := m_SafetyCheck.m_jntErrFlag[g_cartNum,1,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,1,3] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,2,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,2,3];
//cart wheel error flag
m_safetyCheckData.m_cartWheelErr := m_SafetyCheck.m_jntErrFlag[g_cartNum,3,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,3,3] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,4,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,4,3];
//cart stand column error flag
m_safetyCheckData.m_cartStandColumnErr := m_SafetyCheck.m_jntErrFlag[g_cartNum,5,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,5,3];
//cart adjust joint contains 6, 7, and 8 joints
m_safetyCheckData.m_cartAdjustErr := m_SafetyCheck.m_jntErrFlag[g_cartNum,6,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,6,3] 
															OR m_SafetyCheck.m_jntErrFlag[g_cartNum,7,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,7,3]
															OR m_SafetyCheck.m_jntErrFlag[g_cartNum,8,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,8,3];
//cart overhang error flag
m_safetyCheckData.m_cartOverhangErr := m_SafetyCheck.m_jntErrFlag[g_cartNum,8,2] OR m_SafetyCheck.m_jntErrFlag[g_cartNum,8,3];

]]></ST>
      </Implementation>
    </Method>
    <Method Name="robotPromptMassageCast" Id="{4528e69f-5454-4a94-84aa-1a99d7ab54e4}">
      <Declaration><![CDATA[METHOD robotPromptMassageCast : BOOL
VAR_IN_OUT CONSTANT
END_VAR

VAR
	i : UDINT;
	m_uiCtrlAdjustFlag : BOOL;
	m_uiCtrlJoystickEnable : BOOL;
	m_joysticksTrigger : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i := 1 TO 4 DO
	//0*1021
	m_armsRS[i,1](SET:= m_slaveStatus.m_panelClampErrId[i]=1, 
							RESET1:= NOT m_slaveStatus.m_panelInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[1]);
	m_checkVariable[i].m_promptLocation[1] := i + 3;
							
	//0*1022		
	m_armsRS[i,2](SET:= m_slaveStatus.m_panelClampErrId[i]=2, 
							RESET1:= NOT m_slaveStatus.m_panelInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[2]);
	m_checkVariable[i].m_promptLocation[2] := i + 3;
						
	//0*1023				
	m_armsRS[i,3](SET:= m_slaveStatus.m_instruReadErrId[i]=2, 
							RESET1:= NOT m_slaveStatus.m_instruInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[3]);
	m_checkVariable[i].m_promptLocation[3] := i + 3;
	
	//0*1024			
	m_armsRS[i,4](SET:=NOT m_slaveStatus.m_selfCheckPass[i] AND m_slaveStatus.m_panelInstallStatus[i], 
							RESET1:= NOT m_armsRS[i,4].SET, 
							Q1=> m_checkVariable[i].m_promptStatus[4]);
	m_checkVariable[i].m_promptLocation[4] := i + 3;
				
	//0*1025
	
	//0*1026
	
	//0*1028
	m_armsRS[i,8](SET:= m_slaveStatus.m_instruReadErrId[i]=3, 
							RESET1:= NOT m_slaveStatus.m_instruInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[8]);
	m_checkVariable[i].m_promptLocation[8] := i + 3;
	
							
	//0*102D						
	m_armsRS[i,13](SET:= m_slaveStatus.m_instruReadErrId[i]=1, 
							RESET1:= NOT m_slaveStatus.m_instruInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[13]);
	m_checkVariable[i].m_promptLocation[13] := i + 3;
	
							
	//0*102F
	m_armsRS[i,15](SET:= norm(m_slaveStatus.m_masterSlavePoseError[i]) > g_smallNum AND m_slaveStatus.m_armState[i] = SlaveArmState_MasterSlave, 
							RESET1:= NOT m_armsRS[i,15].SET, 
							Q1=> m_checkVariable[i].m_promptStatus[15]);
	m_checkVariable[i].m_promptLocation[15] := i + 3;
	
	//0*1030
	m_armsRS[i,16](SET:= m_slaveStatus.m_instruClampErrId[i]=1, 
							RESET1:= NOT m_slaveStatus.m_instruInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[16]);
	m_checkVariable[i].m_promptLocation[16] := i + 3;
				
	//0*1031
	m_armsRS[i,17](SET:= m_slaveStatus.m_instruClampErrId[i]=2, 
							RESET1:= NOT m_slaveStatus.m_instruInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[17]);
	m_checkVariable[i].m_promptLocation[17] := i + 3;
	
	//0*1032
	m_armsRS[i,18](SET:= m_slaveStatus.m_instruInstallStatus[i] AND NOT m_slaveStatus.m_trocarOnFlag[i], 
							RESET1:= NOT m_slaveStatus.m_instruInstallStatus[i], 
							Q1=> m_checkVariable[i].m_promptStatus[18]);
	m_checkVariable[i].m_promptLocation[18] := i + 3;				
	//0*1033

END_FOR

//0*1027
m_cartRS[7](SET:=m_cartStatus.m_cartDumpEnergy <= 30 , 
						RESET1:= m_cartStatus.m_cartDumpEnergy>30, 
						Q1=> m_checkVariable[g_cartNum].m_promptStatus[7]);
m_checkVariable[g_cartNum].m_promptLocation[7] := g_cartNum + 3;

//0*1029						

//0*102A
m_cartRS[10](SET:= m_cartStatus.m_sdrivingLeverSensorManualFlag, 
						RESET1:=NOT m_cartStatus.m_sdrivingLeverSensorManualFlag, 
						Q1=> m_checkVariable[g_cartNum].m_promptStatus[10]);
m_checkVariable[g_cartNum].m_promptLocation[10] := g_cartNum + 3;
						
//0*102B
m_uiCtrlAdjustFlag := m_cartStatus.m_uiControl.camera_joysticks_enable OR m_cartStatus.m_uiControl.docking_enable OR m_cartStatus.m_uiControl.draping_enable
							OR m_cartStatus.m_uiControl.joysticks_enable OR m_cartStatus.m_uiControl.stow_enable;
m_cartRS[11](SET:= m_cartStatus.m_trocarOnFlag>0 AND m_uiCtrlAdjustFlag, 
						RESET1:= m_cartStatus.m_trocarOnFlag=0 OR NOT m_uiCtrlAdjustFlag, 
						Q1=> m_checkVariable[g_cartNum].m_promptStatus[11]);
m_checkVariable[g_cartNum].m_promptLocation[11] := g_cartNum + 3;

//0*102C
m_uiCtrlJoystickEnable := m_cartStatus.m_uiControl.camera_joysticks_enable OR m_cartStatus.m_uiControl.joysticks_enable;
m_joysticksTrigger := joystickAdjust(m_cartStatus.m_joystickValue);
m_cartRS[12](SET:= m_cartStatus.m_trocarOnFlag=0 AND NOT m_uiCtrlJoystickEnable AND m_joysticksTrigger, 
						RESET1:= NOT m_cartRS[12].SET, 
						Q1=> m_checkVariable[g_cartNum].m_promptStatus[12]);
m_checkVariable[g_cartNum].m_promptLocation[12] := g_cartNum + 3;
						
//0*102E					
m_cartRS[14](SET:= NOT m_slaveStatus.m_masterOnLine, 
						RESET1:= m_slaveStatus.m_masterOnLine, 
						Q1=> m_checkVariable[g_cartNum].m_promptStatus[14]);
m_checkVariable[g_cartNum].m_promptLocation[14] := 16#0C;]]></ST>
      </Implementation>
    </Method>
    <Method Name="warningTone" Id="{82112973-2b93-4990-831a-9a609be275a4}">
      <Declaration><![CDATA[METHOD warningTone : vec4b
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF (GVL_com_upper_PC.current_error_type=3) THEN
	warningTone[1] := TRUE;
	warningTone[2] := FALSE;
	warningTone[3] := FALSE;
ELSIF (GVL_com_upper_PC.current_error_type=2) THEN
	warningTone[1] := FALSE;
	warningTone[2] := TRUE;
	warningTone[3] := FALSE;
ELSIF  (GVL_com_upper_PC.current_error_type=1) THEN
	warningTone[1] := FALSE;
	warningTone[2] := FALSE;
	warningTone[3] := TRUE;
ELSE
	warningTone[1] := FALSE;
	warningTone[2] := FALSE;
	warningTone[3] := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="SafetyCheck">
      <LineId Id="292" Count="12" />
      <LineId Id="395" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="306" Count="4" />
      <LineId Id="389" Count="0" />
      <LineId Id="311" Count="3" />
      <LineId Id="388" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="320" Count="2" />
      <LineId Id="374" Count="0" />
      <LineId Id="323" Count="4" />
      <LineId Id="522" Count="0" />
      <LineId Id="513" Count="0" />
      <LineId Id="515" Count="0" />
      <LineId Id="576" Count="0" />
      <LineId Id="575" Count="0" />
      <LineId Id="66" Count="0" />
    </LineIds>
    <LineIds Name="SafetyCheck.armSafetyCheckAllowed">
      <LineId Id="6" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="65" Count="4" />
      <LineId Id="44" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="60" Count="4" />
      <LineId Id="59" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="53" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="75" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="81" Count="2" />
      <LineId Id="20" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="SafetyCheck.armSafetyCheckInputCast">
      <LineId Id="220" Count="0" />
      <LineId Id="95" Count="4" />
      <LineId Id="205" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="232" Count="1" />
      <LineId Id="231" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="197" Count="2" />
      <LineId Id="211" Count="1" />
      <LineId Id="200" Count="4" />
      <LineId Id="210" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="221" Count="3" />
      <LineId Id="241" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="164" Count="0" />
    </LineIds>
    <LineIds Name="SafetyCheck.joystickAdjust">
      <LineId Id="12" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="SafetyCheck.readErrFlag">
      <LineId Id="6" Count="4" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="SafetyCheck.robotPromptMassageCast">
      <LineId Id="8" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="99" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="151" Count="2" />
      <LineId Id="80" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="85" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="91" Count="3" />
      <LineId Id="90" Count="0" />
      <LineId Id="95" Count="1" />
      <LineId Id="111" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="113" Count="20" />
      <LineId Id="149" Count="0" />
      <LineId Id="134" Count="5" />
      <LineId Id="150" Count="0" />
      <LineId Id="140" Count="4" />
      <LineId Id="110" Count="0" />
    </LineIds>
    <LineIds Name="SafetyCheck.warningTone">
      <LineId Id="9" Count="2" />
      <LineId Id="13" Count="2" />
      <LineId Id="17" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>