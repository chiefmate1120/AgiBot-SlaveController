<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Fb_SafetyCheck" Id="{d7e5b419-2971-4dae-96a7-39fe3a1a6245}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Fb_SafetyCheck
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	i_Var: ARRAY[1..MaxArmNum] OF ErrInputVariable;
	m_AlarmDelay:ARRAY[1..MaxArmNum] OF AlarmDelay;
	m_AlarmDelayTime:AlarmDelayTime;
	m_MonitorThreshold: MonitorThreshold;
	m_checkPermit:ARRAY[1..MaxArmNum] OF  checkPermit;
	
	i,j:UDINT;
	m_ErrLocation:UDINT;
	m_ErrJoint:UDINT;
	m_ErrID:UDINT;
	m_ArrayErrCode:ARRAY [1..100] OF UDINT;
	m_ErrFlag:ARRAY[1..MaxArmNum,0..MaxJoint,1..3] OF BOOL;
	m_ErrFlagID:UINT;
	m_ErrCode:UDINT;
	m_ErrType:ARRAY [1..MaxArmNum,1..3] OF BOOL;
	
	m_ErrNumType3,m_ErrNumType2,m_ErrNumType1:INT;
	o_ArrayErrCodeType:ARRAY [1..3] OF ARRAY [0..100] OF UDINT;
	m_ErrCodeUpdateAllowedType3,m_ErrCodeUpdateAllowedType2,m_ErrCodeUpdateAllowedType1:BOOL;
	m_ErrCodeUpdateDelayType3,m_ErrCodeUpdateDelayType2,m_ErrCodeUpdateDelayType1:TON;//延时接通
	
	o_ErrCode:ARRAY [1..3] OF UDINT;
		
	m_PromptMassBusy:BOOL;
	m_PromptFlag:ARRAY[1..MaxArmNum,1..20] OF UINT;
	m_DeleteCode:UDINT;
	
	m_commuEtherCATState:FB_EcGetSlaveState;
	m_EcSlaveState : ST_EcSlaveState;
	
	m_crcVerify : FB_EcGetSlaveCrcError;
	m_crcError : ST_EcCrcError;
	
END_VAR


VAR CONSTANT
	CarPillar:UDINT:=5;CarBeamRot:UDINT:=6;
	CarOverhang:UDINT:=8;CarBeamStre:UDINT:=7;
	CodeUpdateDelay:TIME:=T#0.1S;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
]]></ST>
    </Implementation>
    <Folder Name="interface" Id="{17cc820b-439e-4bcd-b035-470b65e01b6b}" />
    <Method Name="AlarmInit" Id="{fcbf4986-dc75-4870-b906-36e5ea23ba20}">
      <Declaration><![CDATA[METHOD AlarmInit :BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i:=1 TO MaxJoint BY 1 DO
	IF (i=2) OR (i=3) OR (i=8) THEN
		m_MonitorThreshold.DevSecAndMotorLimit[i]:=0.010; //双码盘偏差极限
		m_MonitorThreshold.FollowDeviationLimit[i]:=0.01; //跟随误差极限
		m_MonitorThreshold.CmdSaltaValueLimit[i]:=0.01;//电机层指令突变  

	ELSIF (i>8) THEN
		m_MonitorThreshold.DevSecAndMotorLimit[i]:=10*g_deg2Rad; //双码盘偏差极限	
		m_MonitorThreshold.FollowDeviationLimit[i]:=10*g_deg2Rad; //跟随误差极限	
		m_MonitorThreshold.CmdSaltaValueLimit[i]:=35*g_deg2Rad;//电机层指令突变  
	ELSE
		m_MonitorThreshold.DevSecAndMotorLimit[i]:=3*g_deg2Rad; //双码盘偏差极限	
		m_MonitorThreshold.FollowDeviationLimit[i]:=5*g_deg2Rad; //跟随误差极限	
		m_MonitorThreshold.CmdSaltaValueLimit[i]:=3*g_deg2Rad;//电机层指令突变
	END_IF
	
	IF (i=2) OR (i=3) THEN
		m_MonitorThreshold.MaxSecEnc[i]:=67108863; //磁栅尺最大值
	ELSE
		m_MonitorThreshold.MaxSecEnc[i]:=16777215; //绝对值编码器最大值
	END_IF
END_FOR


m_AlarmDelayTime.Ti_DualEncDev:=T#0.1S;
m_AlarmDelayTime.Ti_DriveErr:=T#0.05S;
m_AlarmDelayTime.Ti_ActSec:=T#5S;
m_AlarmDelayTime.Ti_JntStatus:=T#1S;
m_AlarmDelayTime.Ti_TorMotor:=T#20S;
m_AlarmDelayTime.Ti_outofLimit:=T#0.1S;
m_AlarmDelayTime.Ti_FollowDev:=T#0.1S;
m_AlarmDelayTime.Ti_JntVel:=T#0.05S;
m_AlarmDelayTime.Ti_JntCurrent:=T#1S;
m_AlarmDelayTime.Ti_EtherCAT:=T#0S;
m_AlarmDelayTime.Ti_FixedPointErr:=T#0.05S;
m_AlarmDelayTime.Ti_CmdJntSaltation:=T#0S;
m_AlarmDelayTime.Ti_IKSaltation:=T#0.003S;
m_AlarmDelayTime.Ti_SpacePosErr:=T#0.2S;
m_AlarmDelayTime.Ti_InstruSingularity:=T#0S;
m_AlarmDelayTime.Ti_InstruOpenAngle:=T#0S;
m_AlarmDelayTime.Ti_SpaceVelFilterM3:=T#0.05S;
m_AlarmDelayTime.Ti_MotPhieErr:=T#0S;


//

m_AlarmDelayTime.Ti_CarDualEncDev:=T#0.02S;
m_AlarmDelayTime.Ti_CarDriveErr:=T#1S;
m_AlarmDelayTime.Ti_CarActSec:=T#10S;
m_AlarmDelayTime.Ti_CarJntStatus:=T#1S;
m_AlarmDelayTime.Ti_CarTorMotor:=T#20S;
m_AlarmDelayTime.Ti_CaroutofLimit:=T#0.1S;
m_AlarmDelayTime.Ti_CarFollowDev:=T#0.02S;
m_AlarmDelayTime.Ti_CarJntVel:=T#0.05S;
m_AlarmDelayTime.Ti_CarJntCurrent:=T#1S;
m_AlarmDelayTime.Ti_CarEtherCAT:=T#0S;
m_AlarmDelayTime.Ti_CarMZDriveErr:=T#1S;



AlarmInit:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="armsSafetyCheck" Id="{09c2f1a9-8e0a-4d09-a292-1a371f055e17}">
      <Declaration><![CDATA[METHOD armsSafetyCheck : BOOL
VAR_INPUT
	i_ArmId:UDINT;
END_VAR

VAR
	k:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//EmergencyStopButton
IF NOT i_Var[i_ArmId].EmergencyStop THEN
	m_ErrLocation:=16#0C; m_ErrJoint:=0; m_ErrID:=16#3001; m_ErrFlagID:=3;
	ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
END_IF


//驱动器状态监测、驱动器未连接
FOR i:=1 TO MaxJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_JntStatus[i](IN:= (i_Var[i_ArmId].JntStatus[i]=0 AND m_checkPermit[i_ArmId].JntStatus[i]), PT:=m_AlarmDelayTime.Ti_JntStatus , Q=> , ET=> );
	m_AlarmDelay[i_ArmId].T_TorMotor[i](IN:= (i_Var[i_ArmId].ActJntTorqueIO[i]=i_Var[i_ArmId].ActJntTorqueIOlast[i] AND m_checkPermit[i_ArmId].TorMotor[i]), PT:=m_AlarmDelayTime.Ti_TorMotor , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_JntStatus[i].Q OR m_AlarmDelay[i_ArmId].T_TorMotor[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#3002; m_ErrFlagID:=3;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR
i_Var[i_ArmId].ActJntTorqueIOlast:=i_Var[i_ArmId].ActJntTorqueIO;


//关节编码器监测
FOR i:=1 TO MaxJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_ActSec[i](IN:= (i_Var[i_ArmId].ActJntSecIO[i]>=m_MonitorThreshold.MaxSecEnc[i] OR i_Var[i_ArmId].ActJntSecIO[i]<=m_MonitorThreshold.MinSecEnc[i]) AND m_checkPermit[i_ArmId].ActSec[i], PT:=m_AlarmDelayTime.Ti_ActSec , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_ActSec[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#3003; m_ErrFlagID:=3;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//驱动器错误检测
FOR i:=1 TO MaxJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_DriveErr[i](IN:= (i_Var[i_ArmId].DriveErrWord[i] AND 16#20)=32 AND m_checkPermit[i_ArmId].DriveErr[i] , PT:=m_AlarmDelayTime.Ti_DriveErr , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_DriveErr[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#3004; m_ErrFlagID:=3;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//双编码器偏差过大检测
FOR i:=1 TO MaxJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_DualEncoderDev[i](IN:= ABS(i_Var[i_ArmId].ActJntSecPos[i]-i_Var[i_ArmId].ActJntPos[i])>=m_MonitorThreshold.DevSecAndMotorLimit[i] AND m_checkPermit[i_ArmId].DualEncoderDev[i], PT:=m_AlarmDelayTime.Ti_DualEncDev , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_DualEncoderDev[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#3005; m_ErrFlagID:=3;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//关节运动超限位
FOR i:=1 TO MaxJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_outofLimit[i](IN:= (i_Var[i_ArmId].ActJntPos[i]>=m_MonitorThreshold.MaxJntLimit[i] OR i_Var[i_ArmId].ActJntPos[i]<=m_MonitorThreshold.MinJntLimit[i]) AND m_checkPermit[i_ArmId].outofLimit[i] , PT:=m_AlarmDelayTime.Ti_outofLimit , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_outofLimit[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#3006; m_ErrFlagID:=3;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//StopButton
IF NOT i_Var[i_ArmId].SlaveStopButton OR i_Var[i_ArmId].PCStopButton=0 OR i_Var[i_ArmId].MasterStopButton THEN
	m_ErrLocation:=16#0C; m_ErrJoint:=0; m_ErrID:=16#2001; m_ErrFlagID:=2;
	ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
END_IF


//关节跟随误差过大
FOR i:=1 TO MaxJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_FollowDev[i](IN:= ABS(i_Var[i_ArmId].cmdJntPos[i]- i_Var[i_ArmId].curJntPos[i])>m_MonitorThreshold.FollowDeviationLimit[i]  AND m_checkPermit[i_ArmId].FollowDev[i], PT:=m_AlarmDelayTime.Ti_FollowDev , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_FollowDev[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#2002; m_ErrFlagID:=2;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//关节速度监控
FOR i:=1 TO MaxJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_JntVel[i](IN:= ABS (i_Var[i_ArmId].ActJntVel[i])>m_MonitorThreshold.JntVelLimit[i] AND m_checkPermit[i_ArmId].JntVel[i], PT:=m_AlarmDelayTime.Ti_JntVel , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_JntVel[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#2003; m_ErrFlagID:=2;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//笛卡尔空间指令与位置偏差检测
FOR i:=1 TO 6 BY 1 DO
	m_AlarmDelay[i_ArmId].T_SpacePosErr[i](IN:= i_Var[i_ArmId].SpacePoseErr[i]> m_MonitorThreshold.SpacePosErrLimit[i] AND m_checkPermit[i_ArmId].SpacePosErr[i], PT:=m_AlarmDelayTime.Ti_SpacePosErr , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_SpacePosErr[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#2004; m_ErrFlagID:=2;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=1, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//电流超限监测
FOR i:=1 TO MaxJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_JntCurrent[i](IN:= ABS(i_Var[i_ArmId].filtJntCurrent[i])>m_MonitorThreshold.JntElectricityLimit[i] AND m_checkPermit[i_ArmId].JntCurrent[i], PT:=m_AlarmDelayTime.Ti_JntCurrent , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_JntCurrent[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#2005; m_ErrFlagID:=2;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//Ethercat通讯检测
FOR i:=1 TO MaxJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_EtherCAT[i](IN:= NOT i_Var[i_ArmId].EtherCATState[i].EtherCATState , PT:=m_AlarmDelayTime.Ti_EtherCAT , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_EtherCAT[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#2006; m_ErrFlagID:=2;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//不动点发生变化监控
m_AlarmDelay[i_ArmId].T_FixedPointErr(IN:=  i_Var[i_ArmId].FixedPointErrLength>m_MonitorThreshold.FixedPointErrLimit AND m_checkPermit[i_ArmId].FixedPointErr, PT:=m_AlarmDelayTime.Ti_FixedPointErr , Q=> , ET=> );
IF m_AlarmDelay[i_ArmId].T_FixedPointErr.Q THEN
	m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=0;  m_ErrID:=16#2007; m_ErrFlagID:=2;
	ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
END_IF


//目标位置指令突变检测
FOR i:=1 TO MaxJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_CmdJntSaltation[i](IN:=  i_Var[i_ArmId].CmdSaltaValue[i]>m_MonitorThreshold.CmdSaltaValueLimit[i] AND m_checkPermit[i_ArmId].CmdJntSaltation[i], PT:=m_AlarmDelayTime.Ti_CmdJntSaltation , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_CmdJntSaltation[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#2008; m_ErrFlagID:=2;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR



//器械在奇异区域内
m_AlarmDelay[i_ArmId].T_InstruSingularity(IN:= (i_Var[i_ArmId].InstruPitch> m_MonitorThreshold.MaxInstruLimit OR i_Var[i_ArmId].InstruPitch< m_MonitorThreshold.MinInstruLimit) AND m_checkPermit[i_ArmId].InstruSingularity , PT:=m_AlarmDelayTime.Ti_InstruSingularity , Q=> , ET=> );
IF m_AlarmDelay[i_ArmId].T_InstruSingularity.Q THEN
	m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=0;  m_ErrID:=16#200E; m_ErrFlagID:=2;
	ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
END_IF


//器械张开角度过大或过小
m_AlarmDelay[i_ArmId].T_InstruOpenAngle(IN:= (i_Var[i_ArmId].InstruOpenAngle> m_MonitorThreshold.MaxInstruOpen OR i_Var[i_ArmId].InstruOpenAngle> m_MonitorThreshold.MinInstruOpen) AND m_checkPermit[i_ArmId].InstruOpenAngle  , PT:=m_AlarmDelayTime.Ti_InstruOpenAngle , Q=> , ET=> );
IF m_AlarmDelay[i_ArmId].T_InstruOpenAngle.Q THEN
	m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=0;  m_ErrID:=16#200F; m_ErrFlagID:=2;
	ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
END_IF



//电机电角度偏差
FOR i:=1 TO MaxJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_MotPhieErr[i](IN:= ABS(i_Var[i_ArmId].MotPhieErr[i])> m_MonitorThreshold.MotPhieErrLimit  AND m_checkPermit[i_ArmId].MotPhieErr[i]  , PT:=m_AlarmDelayTime.Ti_MotPhieErr , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_MotPhieErr[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#2012; m_ErrFlagID:=2;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//提示信息
FOR k:=1 TO 20 BY 1 DO
	PromptMassCode(
		i_PromptStatus:= i_Var[i_ArmId].PromptStatus[k], 
		i_ArmId:= i_ArmId, 
		i_ErrID:= k, 
		i_ErrLocation:=i_Var[i_ArmId].ErrLocation[k] );
END_FOR




]]></ST>
      </Implementation>
    </Method>
    <Method Name="ArrayDeleteFrist" Id="{00e49c9f-cbe8-4b26-b05a-c4b6acb31969}">
      <Declaration><![CDATA[METHOD ArrayDeleteFrist : ARRAY [0..100] OF UDINT;
VAR_INPUT
	i_Array:ARRAY [0..100] OF UDINT;
END_VAR

VAR
	k:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ArrayDeleteFrist[100]:=0;

FOR k:=0 TO 99 BY 1 DO
	ArrayDeleteFrist[k]:=i_Array[k+1];
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="ArrayDeleteInput" Id="{980f1673-9d6d-4af2-a068-78f386b10642}">
      <Declaration><![CDATA[METHOD ArrayDeleteInput : BOOL
VAR_INPUT
	i_Array:ARRAY[0..100] OF UDINT;
	i_DeleteCode:UDINT;
END_VAR

VAR_OUTPUT
	o_Array:ARRAY[0..100] OF UDINT;
	
END_VAR

VAR
	i:INT;
	Falg:BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR i:=0 TO 20 BY 1 DO 
	IF i_Array[i]=i_DeleteCode THEN
		Falg:=TRUE;
	END_IF
	
	IF Falg=TRUE THEN
		o_Array[i]:=i_Array[i+1];
	ELSE
		o_Array[i]:=i_Array[i];
	END_IF
END_FOR
o_Array[20]:=0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ArrayFIFO" Id="{655e2224-db9d-4b4a-8461-cda6c8a0a0dc}">
      <Declaration><![CDATA[METHOD ArrayFIFO : ARRAY [0..100] OF  UDINT
VAR_INPUT
	i_Array:ARRAY[0..100] OF UDINT;
	i_NewData:UDINT;
END_VAR

VAR
	k:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR k:=0 TO 20 BY 1 DO
	ArrayFIFO[k+1]:=i_Array[k];
END_FOR

ArrayFIFO[0]:=i_NewData;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ArrayFILO" Id="{26262d95-ef1c-497d-b548-c28fcd1771c9}">
      <Declaration><![CDATA[METHOD ArrayFILO : ARRAY [0..100] OF  UDINT
VAR_INPUT
	i_Array:ARRAY[0..100] OF UDINT;
	i_NewData:UDINT;
END_VAR

VAR
	k:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR k:=0 TO 20 BY 1 DO
	ArrayFILO[k]:=i_Array[k];
	IF i_Array[k]=0 THEN
		ArrayFILO[k]:=i_NewData;
		EXIT;
	END_IF
END_FOR

]]></ST>
      </Implementation>
    </Method>
    <Method Name="cartSafetyCheck" Id="{64489d60-54d3-406d-a82e-df5d6a98f0f1}">
      <Declaration><![CDATA[METHOD cartSafetyCheck : BOOL
VAR_INPUT
	i_ArmId:UDINT;
END_VAR


VAR
	k:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

//驱动器状态监测、驱动器未连接
FOR i:=1 TO MaxCarJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_CarJntStatus[i](IN:= (i_Var[i_ArmId].CarJntStatus[i]=0 AND m_checkPermit[i_ArmId].CarJntStatus[i]), PT:=m_AlarmDelayTime.Ti_CarJntStatus , Q=> , ET=> );
	//m_AlarmDelay[i_ArmId].T_CarTorMotor[i](IN:= (i_Var[i_ArmId].CarActJntTorqueIO[i]=i_Var[i_ArmId].CarActJntTorqueIOlast[i] AND m_checkPermit[i_ArmId].CarTorMotor[i]), PT:=m_AlarmDelayTime.Ti_CarTorMotor , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_CarJntStatus[i].Q OR m_AlarmDelay[i_ArmId].T_CarTorMotor[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#3002; m_ErrFlagID:=3;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR
i_Var[i_ArmId].CarActJntTorqueIOlast:=i_Var[i_ArmId].CarActJntTorqueIO;


//关节编码器监测
FOR i:=1 TO MaxCarJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_CarActSec[i](IN:= (i_Var[i_ArmId].CarActJntSecIO[i]>=m_MonitorThreshold.CarMaxSecEnc[i] OR i_Var[i_ArmId].CarActJntSecIO[i]<=m_MonitorThreshold.CarMinSecEnc[i]) AND m_checkPermit[i_ArmId].CarActSec[i], PT:=m_AlarmDelayTime.Ti_CarActSec , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_CarActSec[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#3003; m_ErrFlagID:=3;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//驱动器错误检测
FOR i:=1 TO MaxCarJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_CarDriveErr[i](IN:= (i_Var[i_ArmId].CarDriveErrWord[i] AND 16#20)=32 AND m_checkPermit[i_ArmId].CarDriveErr[i] , PT:=m_AlarmDelayTime.Ti_CarDriveErr , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_CarDriveErr[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#3004; m_ErrFlagID:=3;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR



//台车双编码器偏差过大
FOR i:=1 TO MaxCarJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_CarDualEncoderDev[i](IN:= ABS (i_Var[i_ArmId].CarActJntSecPos[i]-i_Var[i_ArmId].CarActJntPos[i])>m_MonitorThreshold.CarDevSecAndMotorLimit[i] AND m_checkPermit[i_ArmId].CarDualEncoderDev[i], PT:=m_AlarmDelayTime.Ti_CarDualEncDev , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_CarDualEncoderDev[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#3005; m_ErrFlagID:=3;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//关节运动超限位
FOR i:=1 TO MaxCarJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_CaroutofLimit[i](IN:= (i_Var[i_ArmId].CarActJntPosDH[i]>=m_MonitorThreshold.CarMaxJntLimit[i] OR i_Var[i_ArmId].CarActJntPosDH[i]<=m_MonitorThreshold.CarMinJntLimit[i]) AND m_checkPermit[i_ArmId].CaroutofLimit[i] , PT:=m_AlarmDelayTime.Ti_CaroutofLimit , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_CaroutofLimit[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#3006; m_ErrFlagID:=3;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//StopButton
IF NOT i_Var[i_ArmId].SlaveStopButton OR i_Var[i_ArmId].PCStopButton=0 OR i_Var[i_ArmId].MasterStopButton THEN
	m_ErrLocation:=16#FF; m_ErrJoint:=0; m_ErrID:=16#2001; m_ErrFlagID:=2;
	ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
END_IF

//关节跟随误差过大
FOR i:=1 TO MaxCarJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_CarFollowDev[i](IN:= ABS(i_Var[i_ArmId].CarcmdJntPos[i]- i_Var[i_ArmId].CarcurJntPos[i])>m_MonitorThreshold.CarFollowDeviationLimit[i]  AND m_checkPermit[i_ArmId].CarFollowDev[i], PT:=m_AlarmDelayTime.Ti_CarFollowDev , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_CarFollowDev[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#2002; m_ErrFlagID:=2;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//关节速度监控
FOR i:=1 TO MaxCarJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_CarJntVel[i](IN:= ABS(i_Var[i_ArmId].CarActJntVel[i])>m_MonitorThreshold.CarJntVelLimit[i] AND m_checkPermit[i_ArmId].CarJntVel[i], PT:=m_AlarmDelayTime.Ti_CarJntVel , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_CarJntVel[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#2003; m_ErrFlagID:=2;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//电流超限监测
FOR i:=1 TO MaxCarJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_CarJntCurrent[i](IN:= ABS(i_Var[i_ArmId].CarMorCurrentFilter[i])>m_MonitorThreshold.CarJntElectricityLimit[i] AND m_checkPermit[i_ArmId].CarJntCurrent[i], PT:=m_AlarmDelayTime.Ti_CarJntCurrent , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_CarJntCurrent[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#2005; m_ErrFlagID:=2;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//Ethercat通讯检测
FOR i:=1 TO MaxCarJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_CarEtherCAT[i](IN:= NOT i_Var[i_ArmId].CarEtherCATState[i], PT:=m_AlarmDelayTime.Ti_CarEtherCAT , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_CarEtherCAT[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#2006; m_ErrFlagID:=2;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


//鸣志驱动器错误检测
FOR i:=1 TO MaxCarJoint BY 1 DO
	m_AlarmDelay[i_ArmId].T_CarMingzhiDriveErr[i](IN:= i_Var[i_ArmId].CarJntStatus[i]=5  AND m_checkPermit[i_ArmId].CarMZDriveErr[i] , PT:=m_AlarmDelayTime.Ti_CarMZDriveErr , Q=> , ET=> );
	IF m_AlarmDelay[i_ArmId].T_CarMingzhiDriveErr[i].Q THEN
		m_ErrLocation:=i_ArmId+3;  m_ErrJoint:=i;  m_ErrID:=16#2009; m_ErrFlagID:=2;
		ErrCodeAssign(i_ArmId:=i_ArmId,i_ErrLocation:= m_ErrLocation, i_ErrJoint:= m_ErrJoint,i_ErrCodeMode:=0, i_ErrID:= m_ErrID );
	END_IF
END_FOR


]]></ST>
      </Implementation>
    </Method>
    <Property Name="checkPermit" Id="{4ac5d9ef-e4e1-4258-a3b3-a263171adb15}" FolderPath="interface\">
      <Declaration><![CDATA[PROPERTY checkPermit : REFERENCE TO ARRAY[1..MaxArmNum] OF  checkPermit]]></Declaration>
      <Get Name="Get" Id="{5a600670-0a2f-4560-9a82-9a30fff97e6d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[checkPermit ref= m_checkPermit;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{06536298-2ca0-4bed-b4ee-b29089d28252}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="checkVariable" Id="{fee27663-f720-414f-979b-75dceea68ef2}" FolderPath="interface\">
      <Declaration><![CDATA[PROPERTY checkVariable :REFERENCE TO ARRAY [1..MaxArmNum] OF ErrInputVariable
	]]></Declaration>
      <Get Name="Get" Id="{f4a1b44b-c2b7-41f0-90aa-7b296efd3880}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[checkVariable REF= i_Var;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{32092c75-bd9e-424f-b894-0aaf1428bc3e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="electriAngleDev" Id="{8c2ea40a-ba18-4d9e-8d1f-4ea5c9f320b3}">
      <Declaration><![CDATA[METHOD electriAngleDev : DINT
VAR_INPUT
	i_motorElectriAngleDev : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF i_motorElectriAngleDev > 50000 THEN
	electriAngleDev := i_motorElectriAngleDev - 65535;
ELSIF i_motorElectriAngleDev < -50000 THEN
	electriAngleDev := i_motorElectriAngleDev + 65535;
ELSE
	electriAngleDev := i_motorElectriAngleDev;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrCodeAssign" Id="{c6bfedc5-fddc-4db6-ba7d-64971d20a433}">
      <Declaration><![CDATA[METHOD ErrCodeAssign : BOOL
VAR_INPUT
	i_ArmId:UDINT;
	i_ErrLocation:UDINT;
	i_ErrCodeMode:UDINT;
	i_ErrJoint:UDINT;
	i_ErrID:UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF m_ErrFlag[i_ArmId,m_ErrJoint,m_ErrFlagID]=FALSE AND m_ErrFlag[i_ArmId,0,3]=FALSE THEN
	m_ErrFlag[i_ArmId,m_ErrJoint,m_ErrFlagID]:=TRUE;
	m_ErrCode:=SHL(i_ErrLocation,24)+SHL(i_ErrCodeMode,20)+SHL(i_ErrJoint,16)+i_ErrID;
	
	
	IF i_ErrID>=16#3000 THEN
		m_ErrNumType3:=LIMIT(0,m_ErrNumType3+1,100);
		o_ArrayErrCodeType[3][m_ErrNumType3]:=m_ErrCode;
		o_ArrayErrCodeArm[i_ArmId]:=ArrayFILO(i_Array:= o_ArrayErrCodeArm[i_ArmId], i_NewData:=m_ErrCode );
		m_ErrType[i_ArmId,3]:=TRUE;
		
	ELSIF i_ErrID>=16#2000 THEN
		m_ErrNumType2:=LIMIT(0,m_ErrNumType2+1,100);
		o_ArrayErrCodeType[2][m_ErrNumType2]:=m_ErrCode;
		o_ArrayErrCodeArm[i_ArmId]:=ArrayFILO(i_Array:= o_ArrayErrCodeArm[i_ArmId], i_NewData:=m_ErrCode );
		m_ErrType[i_ArmId,2]:=TRUE;
		
	ELSE
		//m_ErrNumType1:=LIMIT(0,m_ErrNumType1+1,100);
		//o_ArrayErrCodeType[1][m_ErrNumType1]:=m_ErrCode;
		
	END_IF
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrCodeUpdating" Id="{0b3c9bb2-9217-4fc9-b998-e4a685172889}">
      <Declaration><![CDATA[METHOD ErrCodeUpdating : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
m_ErrCodeUpdateDelayType3(IN:= NOT m_ErrCodeUpdateAllowedType3, PT:=CodeUpdateDelay , Q=> m_ErrCodeUpdateAllowedType3, ET=> );
IF m_ErrCodeUpdateAllowedType3 THEN
	IF m_ErrNumType3>=1 THEN
		//m_ErrCodeUpdateAllowedType3:=FALSE;
		o_ArrayErrCodeType[3]:=ArrayDeleteFrist(i_Array:=o_ArrayErrCodeType[3]) ;
		o_ErrCode[3]:=o_ArrayErrCodeType[3][0] ;
		m_ErrNumType3:=m_ErrNumType3-1;
	END_IF
END_IF


m_ErrCodeUpdateDelayType2(IN:= NOT m_ErrCodeUpdateAllowedType2, PT:=CodeUpdateDelay , Q=> m_ErrCodeUpdateAllowedType2, ET=> );
IF m_ErrCodeUpdateAllowedType2 THEN
	IF m_ErrNumType2>=1 THEN
		//m_ErrCodeUpdateAllowedType2:=FALSE;
		o_ArrayErrCodeType[2]:=ArrayDeleteFrist(i_Array:=o_ArrayErrCodeType[2]) ;
		o_ErrCode[2]:=o_ArrayErrCodeType[2][0] ;
		m_ErrNumType2:=m_ErrNumType2-1;
	END_IF
END_IF


(*
IF m_ErrCodeUpdateAllowedType1 THEN
	IF m_ErrNumType1>=1 THEN
		m_ErrCodeUpdateAllowedType1:=FALSE;
		o_ArrayErrCodeType[1]:=ArrayDeleteFrist(i_Array:=o_ArrayErrCodeType[1]) ;
		o_ErrCode[1]:=o_ArrayErrCodeType[1][1] ;
		m_ErrNumType1:=m_ErrNumType1-1;
	END_IF
END_IF
m_ErrCodeUpdateDelayType1(IN:= NOT m_ErrCodeUpdateAllowedType1, PT:=CodeUpdateDelay , Q=> m_ErrCodeUpdateAllowedType1, ET=> );
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="errFlagReset" Id="{2f8c115b-de2b-4c35-92d2-fdbed32dcf1f}">
      <Declaration><![CDATA[METHOD errFlagReset : BOOL
VAR_INPUT
	i_ArmId:UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

FOR i :=0 TO MaxJoint BY 1 DO
	m_ErrFlag[i_ArmId,i,2]:=FALSE;
END_FOR
m_ErrType[i_ArmId,2]:=FALSE;
o_ErrCode[2]:=0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="EtherCATVerify" Id="{85983f93-2127-4086-b181-c0ad6ff2a841}">
      <Declaration><![CDATA[METHOD EtherCATVerify : ST_EtherCATState
VAR_INPUT
	armsNetID:T_AmsNetID;
	jntAddr:UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
m_commuEtherCATState(sNetId:= armsNetID, nSlaveAddr:= jntAddr, bExecute:= TRUE, tTimeout:= , bBusy=> , bError=> , nErrId=> , state=> m_EcSlaveState);

IF NOT m_commuEtherCATState.bBusy THEN
	m_commuEtherCATState(bExecute:=FALSE);
	IF m_EcSlaveState.deviceState = EC_DEVICE_STATE_OP THEN
		EtherCATVerify.EtherCATState := TRUE;
	ELSE
		EtherCATVerify.EtherCATState := FALSE;
	END_IF
END_IF

m_crcVerify(sNetId:= armsNetID, nSlaveAddr:= jntAddr, bExecute:= TRUE, tTimeout:= , bBusy=> , bError=> , nErrId=> , crcError=> m_crcError);
IF NOT m_crcVerify.bBusy THEN
	m_crcVerify(bExecute:=FALSE);
	EtherCATVerify.CRCPortA := MAX(EtherCATVerify.CRCPortA,m_crcError.portA);
	EtherCATVerify.CRCPortB := MAX(EtherCATVerify.CRCPortB,m_crcError.portB);
	EtherCATVerify.CRCPortC := MAX(EtherCATVerify.CRCPortC,m_crcError.portC);
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="poseErrCheck" Id="{634b1f68-028c-4865-89df-6d37274cf53c}">
      <Declaration><![CDATA[METHOD poseErrCheck : vec6d
VAR_INPUT
	i_cmdPose : ST_Frame;
	i_curPose :ST_Frame;
END_VAR

VAR
	posErr,oriErr:Vec3d;
	matT,rotErr:Mat3d;
	errAngle :LREAL;
	errAxis :Vec3d;
	i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[vecSub(i_cmdPose.m_pos, i_curPose.m_pos,posErr);

matTranspose(i_cmdPose.m_rot, matT);
matMultiply(matT,i_curPose.m_rot, rotErr);
rot2AngAxis(rotErr, angle=>errAngle, axis=>errAxis);
vecMultiNum(errAxis, errAngle,oriErr);

FOR i := 1 TO 6 DO
	IF i <= 3 THEN
		poseErrCheck[i] := posErr[i];
	ELSE
		poseErrCheck[i] := oriErr[i];
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="PromptMassCode" Id="{97898266-aa01-4d86-bccd-f23152d91670}">
      <Declaration><![CDATA[METHOD PromptMassCode : BOOL
VAR_INPUT
	i_PromptStatus:BOOL;
	i_ArmId:UDINT;
	i_ErrID:UDINT;
	i_ErrLocation:UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
m_PromptMassBusy:=TRUE;

//提示置位
IF i_PromptStatus=TRUE AND m_PromptFlag[i_ArmId,i_ErrID]=0 THEN
	m_PromptFlag[i_ArmId,i_ErrID]:=1;
END_IF

//输出提示故障码
IF m_PromptFlag[i_ArmId,i_ErrID]=1 THEN
	m_ErrCode:=SHL(i_ErrLocation,24)+SHL(0,20)+SHL(0,16)+i_ErrID+16#1020;
	//m_ErrNumType1:=LIMIT(0,m_ErrNumType1+1,100);
	o_ArrayErrCodeType[1]:=ArrayFIFO(i_Array:= o_ArrayErrCodeType[1], i_NewData:=m_ErrCode );//m_ErrCode;
	m_PromptFlag[i_ArmId,i_ErrID]:=2;
END_IF

//清除提示故障码
IF m_PromptFlag[i_ArmId,i_ErrID]=2 AND i_PromptStatus=FALSE THEN
	m_DeleteCode:=SHL(i_ErrLocation,24)+SHL(0,20)+SHL(0,16)+i_ErrID+16#1020;
	ArrayDeleteInput(i_Array:= o_ArrayErrCodeType[1], i_DeleteCode:=m_DeleteCode , o_Array=> o_ArrayErrCodeType[1]);
	//m_ErrNumType1:=m_ErrNumType1-1;
	m_PromptFlag[i_ArmId,i_ErrID]:=0;
END_IF
o_ErrCode[1]:=o_ArrayErrCodeType[1][0];
m_PromptMassBusy:=FALSE;

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="Fb_SafetyCheck">
      <LineId Id="11" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.AlarmInit">
      <LineId Id="83" Count="5" />
      <LineId Id="130" Count="0" />
      <LineId Id="89" Count="8" />
      <LineId Id="135" Count="0" />
      <LineId Id="124" Count="1" />
      <LineId Id="127" Count="1" />
      <LineId Id="126" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="99" Count="0" />
      <LineId Id="106" Count="16" />
      <LineId Id="160" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="150" Count="3" />
      <LineId Id="166" Count="0" />
      <LineId Id="155" Count="3" />
      <LineId Id="149" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.armsSafetyCheck">
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="2" />
      <LineId Id="43" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="231" Count="8" />
      <LineId Id="230" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="244" Count="7" />
      <LineId Id="243" Count="0" />
      <LineId Id="252" Count="8" />
      <LineId Id="242" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="74" Count="8" />
      <LineId Id="73" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="87" Count="2" />
      <LineId Id="93" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="95" Count="8" />
      <LineId Id="94" Count="0" />
      <LineId Id="105" Count="8" />
      <LineId Id="104" Count="0" />
      <LineId Id="318" Count="8" />
      <LineId Id="116" Count="0" />
      <LineId Id="327" Count="0" />
      <LineId Id="117" Count="7" />
      <LineId Id="32" Count="0" />
      <LineId Id="136" Count="8" />
      <LineId Id="135" Count="0" />
      <LineId Id="147" Count="2" />
      <LineId Id="151" Count="4" />
      <LineId Id="157" Count="8" />
      <LineId Id="317" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="192" Count="1" />
      <LineId Id="195" Count="4" />
      <LineId Id="201" Count="2" />
      <LineId Id="205" Count="5" />
      <LineId Id="229" Count="0" />
      <LineId Id="221" Count="7" />
      <LineId Id="220" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="294" Count="3" />
      <LineId Id="293" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="275" Count="1" />
      <LineId Id="145" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.ArrayDeleteFrist">
      <LineId Id="7" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.ArrayDeleteInput">
      <LineId Id="8" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.ArrayFIFO">
      <LineId Id="7" Count="1" />
      <LineId Id="13" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.ArrayFILO">
      <LineId Id="14" Count="2" />
      <LineId Id="19" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.cartSafetyCheck">
      <LineId Id="16" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="27" Count="2" />
      <LineId Id="35" Count="0" />
      <LineId Id="31" Count="3" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="46" Count="6" />
      <LineId Id="44" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="53" Count="6" />
      <LineId Id="42" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="7" Count="6" />
      <LineId Id="5" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="61" Count="6" />
      <LineId Id="38" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="70" Count="3" />
      <LineId Id="68" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="77" Count="6" />
      <LineId Id="76" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="87" Count="7" />
      <LineId Id="86" Count="0" />
      <LineId Id="95" Count="8" />
      <LineId Id="85" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="108" Count="6" />
      <LineId Id="107" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="116" Count="6" />
      <LineId Id="105" Count="0" />
      <LineId Id="128" Count="1" />
      <LineId Id="74" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.checkPermit.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.checkPermit.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.checkVariable.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.checkVariable.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.electriAngleDev">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="3" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.ErrCodeAssign">
      <LineId Id="69" Count="23" />
      <LineId Id="49" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.ErrCodeUpdating">
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="17" Count="4" />
      <LineId Id="39" Count="0" />
      <LineId Id="22" Count="3" />
      <LineId Id="16" Count="0" />
      <LineId Id="28" Count="4" />
      <LineId Id="40" Count="0" />
      <LineId Id="33" Count="3" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.errFlagReset">
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.EtherCATVerify">
      <LineId Id="7" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="17" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="24" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.poseErrCheck">
      <LineId Id="8" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="3" />
      <LineId Id="69" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="71" Count="0" />
    </LineIds>
    <LineIds Name="Fb_SafetyCheck.PromptMassCode">
      <LineId Id="57" Count="2" />
      <LineId Id="40" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>